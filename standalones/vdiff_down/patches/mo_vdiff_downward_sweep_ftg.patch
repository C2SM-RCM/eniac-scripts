diff --git a/src/atm_phy_echam/mo_vdiff_downward_sweep.f90 b/src/atm_phy_echam/mo_vdiff_downward_sweep.f90
index 81bcf538a..0dd8a4a5b 100644
--- a/src/atm_phy_echam/mo_vdiff_downward_sweep.f90
+++ b/src/atm_phy_echam/mo_vdiff_downward_sweep.f90
@@ -30,6 +30,27 @@ MODULE mo_vdiff_downward_sweep
   PRIVATE
   PUBLIC :: vdiff_down
 
+
+  ! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+  
+  LOGICAL :: ftg_vdiff_down_capture_input_enabled = .TRUE.
+  LOGICAL :: ftg_vdiff_down_capture_output_enabled = .TRUE.
+  INTEGER :: ftg_vdiff_down_capture_round = 1
+  INTEGER :: ftg_vdiff_down_round = 0
+  CHARACTER(len=1024) :: ftg_vdiff_down_input_dir = &
+  '++FTGDATADIR++/data/input'
+  CHARACTER(len=1024) :: ftg_vdiff_down_output_dir = &
+  '++FTGDATADIR++/data/output'
+  
+  PUBLIC :: ftg_vdiff_down_capture_input_enabled, ftg_vdiff_down_capture_output_enabled, ftg_vdiff_down_capture_round, &
+  &  ftg_vdiff_down_input_dir, ftg_vdiff_down_output_dir
+  
+  
+  
+  
+  ! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+  
+
 CONTAINS
   !>
   !!
@@ -184,6 +205,18 @@ CONTAINS
 
     REAL(wp) :: zconst
 
+  ! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+  
+  ftg_vdiff_down_round = ftg_vdiff_down_round + 1
+  CALL ftg_vdiff_down_capture_input(kproma, kbdim, klev, klevm1, klevp1, ktrac, ksfc_type, idx_wtr, idx_ice, idx_lnd, pdtime, &
+  &  pcoriol, pzf, pzh, pfrc, ptsfc_tile, pocu, pocv, ppsfc, pum1, pvm1, ptm1, pqm1, pxlm1, pxim1, pxm1, pxtm1, pmair, pmdry, &
+  &  paphm1, papm1, ptvm1, paclc, pxt_emis, pthvvar, pxvar, pz0m_tile, ptkem1, pustar, pwstar, pwstar_tile, pqsat_tile, pghpbl, &
+  &  pri, pri_tile, pmixlen, pcfm, pcfm_tile, pcfh, pcfh_tile, pcfv, pcftke, pcfthv, aa, aa_btm, bb, bb_btm, pfactor_sfc, &
+  &  pcpt_tile, pcptgz, pzthvvar, pthvsig, pztkevn, pch_tile, pbn_tile, pbhn_tile, pbm_tile, pbh_tile, pcsat, pcair, paz0lh)
+  
+  ! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+
+
     !----------------------------------------------------------------------
     ! 0. Compute useful local fields
     !----------------------------------------------------------------------
@@ -303,7 +336,478 @@ CONTAINS
     CALL rhs_elim ( kproma, kbdim, itop, klev, klevm1, &! in
                   & aa, bb                             )! in, inout
 
+
+  ! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+  
+  CALL ftg_vdiff_down_capture_output(pustar, pwstar, pwstar_tile, pqsat_tile, pghpbl, pri, pri_tile, pmixlen, pcfm, pcfm_tile, &
+  &  pcfh, pcfh_tile, pcfv, pcftke, pcfthv, aa, aa_btm, bb, bb_btm, pfactor_sfc, pcpt_tile, pcptgz, pzthvvar, pthvsig, pztkevn, &
+  &  pch_tile, pbn_tile, pbhn_tile, pbm_tile, pbh_tile)
+  
+  ! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+
   END SUBROUTINE vdiff_down
+
+! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+
+SUBROUTINE ftg_vdiff_down_init_for_capture(stage, dir)
+  
+  USE mo_impl_constants, ONLY: MAX_CHAR_LENGTH
+  USE mo_mpi,            ONLY: get_my_mpi_all_id
+  USE m_ser_ftg,         ONLY: ftg_set_serializer, ftg_add_serializer_metainfo, ignore_bullshit_max_dim_size, &
+  &  ignore_bullshit_allow_negative_indices
+  
+  CHARACTER(*), INTENT(IN) :: stage, dir
+  
+  CHARACTER(len=MAX_CHAR_LENGTH) :: basename, mkdirerr
+  
+  WRITE (basename,'(a,a,a,i0)') 'ftg_vdiff_down_', TRIM(stage), '_', get_my_mpi_all_id()
+  
+  WRITE (0,*) 'FTG INIT vdiff_down '//TRIM(basename), get_my_mpi_all_id()
+  
+  mkdirerr = ''
+  CALL EXECUTE_COMMAND_LINE('mkdir -p '//TRIM(dir), cmdmsg=mkdirerr)
+  IF (TRIM(mkdirerr) /= '') THEN
+    WRITE (0,*) 'FTG INIT *** ERROR: ', TRIM(mkdirerr)
+  END IF
+  
+  ignore_bullshit_max_dim_size = 100000
+  ignore_bullshit_allow_negative_indices = .TRUE.
+  
+  CALL ftg_set_serializer(TRIM(dir), TRIM(basename), 'w')
+  CALL ftg_add_serializer_metainfo('subroutine', 'vdiff_down')
+  CALL ftg_add_serializer_metainfo('stage', stage)
+  CALL ftg_add_serializer_metainfo('mpi_all_id', get_my_mpi_all_id())
+  
+END SUBROUTINE ftg_vdiff_down_init_for_capture
+
+LOGICAL FUNCTION ftg_vdiff_down_capture_input_active()
+
+ftg_vdiff_down_capture_input_active =       &
+ftg_vdiff_down_capture_input_enabled .AND.  &
+ftg_vdiff_down_round .EQ. ftg_vdiff_down_capture_round
+
+END FUNCTION ftg_vdiff_down_capture_input_active
+
+SUBROUTINE ftg_vdiff_down_capture_input(kproma, kbdim, klev, klevm1, klevp1, ktrac, ksfc_type, idx_wtr, idx_ice, idx_lnd, pdtime, &
+&  pcoriol, pzf, pzh, pfrc, ptsfc_tile, pocu, pocv, ppsfc, pum1, pvm1, ptm1, pqm1, pxlm1, pxim1, pxm1, pxtm1, pmair, pmdry, &
+&  paphm1, papm1, ptvm1, paclc, pxt_emis, pthvvar, pxvar, pz0m_tile, ptkem1, pustar, pwstar, pwstar_tile, pqsat_tile, pghpbl, pri, &
+&  pri_tile, pmixlen, pcfm, pcfm_tile, pcfh, pcfh_tile, pcfv, pcftke, pcfthv, aa, aa_btm, bb, bb_btm, pfactor_sfc, pcpt_tile, &
+&  pcptgz, pzthvvar, pthvsig, pztkevn, pch_tile, pbn_tile, pbhn_tile, pbm_tile, pbh_tile, pcsat, pcair, paz0lh)
+  
+  USE mtime,     ONLY: calendarType
+  USE mo_mpi,    ONLY: get_my_mpi_all_id
+  USE m_ser_ftg, ONLY: ftg_set_savepoint, ftg_write, ftg_register_only, ftg_destroy_savepoint, ftg_destroy_serializer
+  
+  USE mo_vdiff_config, ONLY: mo_vdiff_config__vdiff_config => vdiff_config, t_vdiff_config
+  USE mo_vdiff_solver, ONLY: mo_vdiff_solver__ixl => ixl, mo_vdiff_solver__ixi => ixi, mo_vdiff_solver__nmatrix => nmatrix, &
+  &  mo_vdiff_solver__imh => imh, mo_vdiff_solver__nvar_vdiff => nvar_vdiff, mo_vdiff_solver__ixv => ixv, mo_vdiff_solver__imqv => &
+  &  imqv, mo_vdiff_solver__matrix_idx => matrix_idx, mo_vdiff_solver__ibtm_var => ibtm_var, mo_vdiff_solver__ithv => ithv, &
+  &  mo_vdiff_solver__iqv => iqv, mo_vdiff_solver__ibtm_mtrx => ibtm_mtrx, mo_vdiff_solver__ih => ih, mo_vdiff_solver__itrc_start &
+  &  => itrc_start, mo_vdiff_solver__iv => iv, mo_vdiff_solver__iu => iu, mo_vdiff_solver__itke => itke
+  USE mo_convect_tables, ONLY: mo_convect_tables__tlucu => tlucu, mo_convect_tables__lookupoverflow => lookupoverflow
+#ifdef __SPLINE_TEST__
+  USE mo_convect_tables, ONLY: mo_convect_tables__za => za, mo_convect_tables__ua => ua, mo_convect_tables__dua => dua
+#endif
+  USE mo_echam_vdiff_params, ONLY: mo_echam_vdiff_params__tke_min => tke_min, mo_echam_vdiff_params__itop => itop, &
+  &  mo_echam_vdiff_params__da1 => da1
+  
+  INTEGER, INTENT(in) :: kproma
+  INTEGER, INTENT(in) :: kbdim
+  INTEGER, INTENT(in) :: klev
+  INTEGER, INTENT(in) :: klevm1
+  INTEGER, INTENT(in) :: klevp1
+  INTEGER, INTENT(in) :: ktrac
+  INTEGER, INTENT(in) :: ksfc_type
+  INTEGER, INTENT(in) :: idx_wtr
+  INTEGER, INTENT(in) :: idx_ice
+  INTEGER, INTENT(in) :: idx_lnd
+  REAL(wp), INTENT(in) :: pdtime
+  REAL(wp), DIMENSION(:), INTENT(in) :: pcoriol
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pzf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pzh
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pfrc
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: ptsfc_tile
+  REAL(wp), DIMENSION(:), INTENT(in) :: pocu
+  REAL(wp), DIMENSION(:), INTENT(in) :: pocv
+  REAL(wp), DIMENSION(:), INTENT(in) :: ppsfc
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pum1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pvm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: ptm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pqm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxlm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxim1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxm1
+  REAL(wp), DIMENSION(:,:,:), INTENT(in) :: pxtm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pmair
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pmdry
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: paphm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: papm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: ptvm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: paclc
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxt_emis
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pthvvar
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxvar
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pz0m_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: ptkem1
+  REAL(wp), DIMENSION(:), INTENT(in) :: pustar
+  REAL(wp), DIMENSION(:), INTENT(in) :: pwstar
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pwstar_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pqsat_tile
+  REAL(wp), DIMENSION(:), INTENT(in) :: pghpbl
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pri
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pri_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pmixlen
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfm
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfm_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfh
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfh_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfv
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcftke
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfthv
+  REAL(wp), DIMENSION(:,:,:,:), INTENT(in) :: aa
+  REAL(wp), DIMENSION(:,:,:,:), INTENT(in) :: aa_btm
+  REAL(wp), DIMENSION(:,:,:), INTENT(in) :: bb
+  REAL(wp), DIMENSION(:,:,:), INTENT(in) :: bb_btm
+  REAL(wp), DIMENSION(:), INTENT(in) :: pfactor_sfc
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcpt_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcptgz
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pzthvvar
+  REAL(wp), DIMENSION(:), INTENT(in) :: pthvsig
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pztkevn
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pch_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pbn_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pbhn_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pbm_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pbh_tile
+  REAL(wp), DIMENSION(:), INTENT(in), OPTIONAL :: pcsat
+  REAL(wp), DIMENSION(:), INTENT(in), OPTIONAL :: pcair
+  REAL(wp), DIMENSION(:), INTENT(in), OPTIONAL :: paz0lh
+  
+  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
+  CHARACTER(len=256) :: ftg_c
+  
+  IF (ftg_vdiff_down_capture_input_active()) THEN
+    
+    CALL ftg_vdiff_down_init_for_capture('input', ftg_vdiff_down_input_dir)
+    CALL ftg_set_savepoint('input')
+    
+    WRITE (0,*) 'FTG ROUND vdiff_down ', ftg_vdiff_down_round, get_my_mpi_all_id()
+    WRITE (0,*) 'FTG WRITE INPUT DATA vdiff_down', get_my_mpi_all_id()
+    
+    ! MTIME CALENDAR TYPE --> Remove this line if mtime is not used
+    CALL ftg_write("ftg_mtime_calendar", calendarType())
+    
+    ! BASIC ARGUMENTS
+    CALL ftg_write("kproma", kproma)
+    CALL ftg_write("kbdim", kbdim)
+    CALL ftg_write("klev", klev)
+    CALL ftg_write("klevm1", klevm1)
+    CALL ftg_write("klevp1", klevp1)
+    CALL ftg_write("ktrac", ktrac)
+    CALL ftg_write("ksfc_type", ksfc_type)
+    CALL ftg_write("idx_wtr", idx_wtr)
+    CALL ftg_write("idx_ice", idx_ice)
+    CALL ftg_write("idx_lnd", idx_lnd)
+    CALL ftg_write("pdtime", pdtime)
+    CALL ftg_write("pcoriol", pcoriol, LBOUND(pcoriol), UBOUND(pcoriol))
+    CALL ftg_write("pzf", pzf, LBOUND(pzf), UBOUND(pzf))
+    CALL ftg_write("pzh", pzh, LBOUND(pzh), UBOUND(pzh))
+    CALL ftg_write("pfrc", pfrc, LBOUND(pfrc), UBOUND(pfrc))
+    CALL ftg_write("ptsfc_tile", ptsfc_tile, LBOUND(ptsfc_tile), UBOUND(ptsfc_tile))
+    CALL ftg_write("pocu", pocu, LBOUND(pocu), UBOUND(pocu))
+    CALL ftg_write("pocv", pocv, LBOUND(pocv), UBOUND(pocv))
+    CALL ftg_write("ppsfc", ppsfc, LBOUND(ppsfc), UBOUND(ppsfc))
+    CALL ftg_write("pum1", pum1, LBOUND(pum1), UBOUND(pum1))
+    CALL ftg_write("pvm1", pvm1, LBOUND(pvm1), UBOUND(pvm1))
+    CALL ftg_write("ptm1", ptm1, LBOUND(ptm1), UBOUND(ptm1))
+    CALL ftg_write("pqm1", pqm1, LBOUND(pqm1), UBOUND(pqm1))
+    CALL ftg_write("pxlm1", pxlm1, LBOUND(pxlm1), UBOUND(pxlm1))
+    CALL ftg_write("pxim1", pxim1, LBOUND(pxim1), UBOUND(pxim1))
+    CALL ftg_write("pxm1", pxm1, LBOUND(pxm1), UBOUND(pxm1))
+    CALL ftg_write("pxtm1", pxtm1, LBOUND(pxtm1), UBOUND(pxtm1))
+    CALL ftg_write("pmair", pmair, LBOUND(pmair), UBOUND(pmair))
+    CALL ftg_write("pmdry", pmdry, LBOUND(pmdry), UBOUND(pmdry))
+    CALL ftg_write("paphm1", paphm1, LBOUND(paphm1), UBOUND(paphm1))
+    CALL ftg_write("papm1", papm1, LBOUND(papm1), UBOUND(papm1))
+    CALL ftg_write("ptvm1", ptvm1, LBOUND(ptvm1), UBOUND(ptvm1))
+    CALL ftg_write("paclc", paclc, LBOUND(paclc), UBOUND(paclc))
+    CALL ftg_write("pxt_emis", pxt_emis, LBOUND(pxt_emis), UBOUND(pxt_emis))
+    CALL ftg_write("pthvvar", pthvvar, LBOUND(pthvvar), UBOUND(pthvvar))
+    CALL ftg_write("pxvar", pxvar, LBOUND(pxvar), UBOUND(pxvar))
+    CALL ftg_write("pz0m_tile", pz0m_tile, LBOUND(pz0m_tile), UBOUND(pz0m_tile))
+    CALL ftg_write("ptkem1", ptkem1, LBOUND(ptkem1), UBOUND(ptkem1))
+    CALL ftg_write("pustar", pustar, LBOUND(pustar), UBOUND(pustar))
+    CALL ftg_write("pwstar", pwstar, LBOUND(pwstar), UBOUND(pwstar))
+    CALL ftg_write("pwstar_tile", pwstar_tile, LBOUND(pwstar_tile), UBOUND(pwstar_tile))
+    CALL ftg_write("pqsat_tile", pqsat_tile, LBOUND(pqsat_tile), UBOUND(pqsat_tile))
+    CALL ftg_write("pghpbl", pghpbl, LBOUND(pghpbl), UBOUND(pghpbl))
+    CALL ftg_write("pri", pri, LBOUND(pri), UBOUND(pri))
+    CALL ftg_write("pri_tile", pri_tile, LBOUND(pri_tile), UBOUND(pri_tile))
+    CALL ftg_write("pmixlen", pmixlen, LBOUND(pmixlen), UBOUND(pmixlen))
+    CALL ftg_write("pcfm", pcfm, LBOUND(pcfm), UBOUND(pcfm))
+    CALL ftg_write("pcfm_tile", pcfm_tile, LBOUND(pcfm_tile), UBOUND(pcfm_tile))
+    CALL ftg_write("pcfh", pcfh, LBOUND(pcfh), UBOUND(pcfh))
+    CALL ftg_write("pcfh_tile", pcfh_tile, LBOUND(pcfh_tile), UBOUND(pcfh_tile))
+    CALL ftg_write("pcfv", pcfv, LBOUND(pcfv), UBOUND(pcfv))
+    CALL ftg_write("pcftke", pcftke, LBOUND(pcftke), UBOUND(pcftke))
+    CALL ftg_write("pcfthv", pcfthv, LBOUND(pcfthv), UBOUND(pcfthv))
+    CALL ftg_write("aa", aa, LBOUND(aa), UBOUND(aa))
+    CALL ftg_write("aa_btm", aa_btm, LBOUND(aa_btm), UBOUND(aa_btm))
+    CALL ftg_write("bb", bb, LBOUND(bb), UBOUND(bb))
+    CALL ftg_write("bb_btm", bb_btm, LBOUND(bb_btm), UBOUND(bb_btm))
+    CALL ftg_write("pfactor_sfc", pfactor_sfc, LBOUND(pfactor_sfc), UBOUND(pfactor_sfc))
+    CALL ftg_write("pcpt_tile", pcpt_tile, LBOUND(pcpt_tile), UBOUND(pcpt_tile))
+    CALL ftg_write("pcptgz", pcptgz, LBOUND(pcptgz), UBOUND(pcptgz))
+    CALL ftg_write("pzthvvar", pzthvvar, LBOUND(pzthvvar), UBOUND(pzthvvar))
+    CALL ftg_write("pthvsig", pthvsig, LBOUND(pthvsig), UBOUND(pthvsig))
+    CALL ftg_write("pztkevn", pztkevn, LBOUND(pztkevn), UBOUND(pztkevn))
+    CALL ftg_write("pch_tile", pch_tile, LBOUND(pch_tile), UBOUND(pch_tile))
+    CALL ftg_write("pbn_tile", pbn_tile, LBOUND(pbn_tile), UBOUND(pbn_tile))
+    CALL ftg_write("pbhn_tile", pbhn_tile, LBOUND(pbhn_tile), UBOUND(pbhn_tile))
+    CALL ftg_write("pbm_tile", pbm_tile, LBOUND(pbm_tile), UBOUND(pbm_tile))
+    CALL ftg_write("pbh_tile", pbh_tile, LBOUND(pbh_tile), UBOUND(pbh_tile))
+    
+    
+    ! OPTIONAL ARGUMENTS
+    IF (PRESENT(pcsat)) THEN
+      CALL ftg_write("pcsat", pcsat, LBOUND(pcsat), UBOUND(pcsat))
+    END IF
+    IF (PRESENT(pcair)) THEN
+      CALL ftg_write("pcair", pcair, LBOUND(pcair), UBOUND(pcair))
+    END IF
+    IF (PRESENT(paz0lh)) THEN
+      CALL ftg_write("paz0lh", paz0lh, LBOUND(paz0lh), UBOUND(paz0lh))
+    END IF
+    
+    ! TYPE MEMBERS
+    
+    
+    ! GLOBALS
+    CALL ftg_write("mo_echam_vdiff_params__da1", mo_echam_vdiff_params__da1)
+#ifdef __SPLINE_TEST__
+    CALL ftg_write("mo_convect_tables__dua", mo_convect_tables__dua, LBOUND(mo_convect_tables__dua), UBOUND(mo_convect_tables__dua))
+#endif
+    IF (ALLOCATED(mo_vdiff_solver__ibtm_mtrx)) THEN
+      CALL ftg_write("mo_vdiff_solver__ibtm_mtrx", mo_vdiff_solver__ibtm_mtrx, LBOUND(mo_vdiff_solver__ibtm_mtrx), UBOUND( &
+      &  mo_vdiff_solver__ibtm_mtrx))
+    END IF
+    IF (ALLOCATED(mo_vdiff_solver__ibtm_var)) THEN
+      CALL ftg_write("mo_vdiff_solver__ibtm_var", mo_vdiff_solver__ibtm_var, LBOUND(mo_vdiff_solver__ibtm_var), UBOUND( &
+      &  mo_vdiff_solver__ibtm_var))
+    END IF
+    CALL ftg_write("mo_vdiff_solver__ih", mo_vdiff_solver__ih)
+    CALL ftg_write("mo_vdiff_solver__imh", mo_vdiff_solver__imh)
+    CALL ftg_write("mo_vdiff_solver__imqv", mo_vdiff_solver__imqv)
+    CALL ftg_write("mo_vdiff_solver__iqv", mo_vdiff_solver__iqv)
+    CALL ftg_write("mo_vdiff_solver__ithv", mo_vdiff_solver__ithv)
+    CALL ftg_write("mo_vdiff_solver__itke", mo_vdiff_solver__itke)
+    CALL ftg_write("mo_echam_vdiff_params__itop", mo_echam_vdiff_params__itop)
+    CALL ftg_write("mo_vdiff_solver__itrc_start", mo_vdiff_solver__itrc_start)
+    CALL ftg_write("mo_vdiff_solver__iu", mo_vdiff_solver__iu)
+    CALL ftg_write("mo_vdiff_solver__iv", mo_vdiff_solver__iv)
+    CALL ftg_write("mo_vdiff_solver__ixi", mo_vdiff_solver__ixi)
+    CALL ftg_write("mo_vdiff_solver__ixl", mo_vdiff_solver__ixl)
+    CALL ftg_write("mo_vdiff_solver__ixv", mo_vdiff_solver__ixv)
+    CALL ftg_write("mo_convect_tables__lookupoverflow", mo_convect_tables__lookupoverflow)
+    IF (ALLOCATED(mo_vdiff_solver__matrix_idx)) THEN
+      CALL ftg_write("mo_vdiff_solver__matrix_idx", mo_vdiff_solver__matrix_idx, LBOUND(mo_vdiff_solver__matrix_idx), UBOUND( &
+      &  mo_vdiff_solver__matrix_idx))
+    END IF
+    CALL ftg_write("mo_vdiff_solver__nmatrix", mo_vdiff_solver__nmatrix)
+    CALL ftg_write("mo_vdiff_solver__nvar_vdiff", mo_vdiff_solver__nvar_vdiff)
+    CALL ftg_write("mo_echam_vdiff_params__tke_min", mo_echam_vdiff_params__tke_min)
+    CALL ftg_write("mo_convect_tables__tlucu", mo_convect_tables__tlucu, LBOUND(mo_convect_tables__tlucu), UBOUND( &
+    &  mo_convect_tables__tlucu))
+#ifdef __SPLINE_TEST__
+    CALL ftg_write("mo_convect_tables__ua", mo_convect_tables__ua, LBOUND(mo_convect_tables__ua), UBOUND(mo_convect_tables__ua))
+    CALL ftg_write("mo_convect_tables__za", mo_convect_tables__za, LBOUND(mo_convect_tables__za), UBOUND(mo_convect_tables__za))
+#endif
+    CALL ftg_register_only("mo_vdiff_config__vdiff_config", "TYPE(t_vdiff_config)")
+    CALL ftg_write("mo_vdiff_config__vdiff_config%lsfc_heat_flux", mo_vdiff_config__vdiff_config%lsfc_heat_flux)
+    CALL ftg_write("mo_vdiff_config__vdiff_config%lsfc_mom_flux", mo_vdiff_config__vdiff_config%lsfc_mom_flux)
+    
+    
+    CALL ftg_write("ftg_vdiff_down_round", ftg_vdiff_down_round)
+    
+    CALL ftg_destroy_savepoint()
+    WRITE (0,*) 'FTG FINALIZE INPUT DATA vdiff_down', get_my_mpi_all_id()
+    CALL ftg_destroy_serializer()
+    
+  END IF
+  
+END SUBROUTINE ftg_vdiff_down_capture_input
+
+LOGICAL FUNCTION ftg_vdiff_down_capture_output_active()
+
+ftg_vdiff_down_capture_output_active =       &
+ftg_vdiff_down_capture_output_enabled .AND.  &
+ftg_vdiff_down_round .EQ. ftg_vdiff_down_capture_round
+
+END FUNCTION ftg_vdiff_down_capture_output_active
+
+SUBROUTINE ftg_vdiff_down_capture_output(pustar, pwstar, pwstar_tile, pqsat_tile, pghpbl, pri, pri_tile, pmixlen, pcfm, pcfm_tile, &
+&  pcfh, pcfh_tile, pcfv, pcftke, pcfthv, aa, aa_btm, bb, bb_btm, pfactor_sfc, pcpt_tile, pcptgz, pzthvvar, pthvsig, pztkevn, &
+&  pch_tile, pbn_tile, pbhn_tile, pbm_tile, pbh_tile)
+  
+  USE mo_mpi, ONLY: work_mpi_barrier, get_my_mpi_all_id
+  USE mo_exception, ONLY: finish
+  USE m_ser_ftg, ONLY: ftg_set_savepoint, ftg_write, ftg_register_only, ftg_destroy_savepoint, ftg_destroy_serializer
+  
+  USE mo_vdiff_config, ONLY: mo_vdiff_config__vdiff_config => vdiff_config, t_vdiff_config
+  USE mo_vdiff_solver, ONLY: mo_vdiff_solver__ixl => ixl, mo_vdiff_solver__ixi => ixi, mo_vdiff_solver__nmatrix => nmatrix, &
+  &  mo_vdiff_solver__imh => imh, mo_vdiff_solver__nvar_vdiff => nvar_vdiff, mo_vdiff_solver__ixv => ixv, mo_vdiff_solver__imqv => &
+  &  imqv, mo_vdiff_solver__matrix_idx => matrix_idx, mo_vdiff_solver__ibtm_var => ibtm_var, mo_vdiff_solver__ithv => ithv, &
+  &  mo_vdiff_solver__iqv => iqv, mo_vdiff_solver__ibtm_mtrx => ibtm_mtrx, mo_vdiff_solver__ih => ih, mo_vdiff_solver__itrc_start &
+  &  => itrc_start, mo_vdiff_solver__iv => iv, mo_vdiff_solver__iu => iu, mo_vdiff_solver__itke => itke
+  USE mo_convect_tables, ONLY: mo_convect_tables__tlucu => tlucu, mo_convect_tables__lookupoverflow => lookupoverflow
+#ifdef __SPLINE_TEST__
+  USE mo_convect_tables, ONLY: mo_convect_tables__za => za, mo_convect_tables__ua => ua, mo_convect_tables__dua => dua
+#endif
+  USE mo_echam_vdiff_params, ONLY: mo_echam_vdiff_params__tke_min => tke_min, mo_echam_vdiff_params__itop => itop, &
+  &  mo_echam_vdiff_params__da1 => da1
+  
+  REAL(wp), DIMENSION(:), INTENT(in) :: pustar
+  REAL(wp), DIMENSION(:), INTENT(in) :: pwstar
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pwstar_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pqsat_tile
+  REAL(wp), DIMENSION(:), INTENT(in) :: pghpbl
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pri
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pri_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pmixlen
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfm
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfm_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfh
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfh_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfv
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcftke
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfthv
+  REAL(wp), DIMENSION(:,:,:,:), INTENT(in) :: aa
+  REAL(wp), DIMENSION(:,:,:,:), INTENT(in) :: aa_btm
+  REAL(wp), DIMENSION(:,:,:), INTENT(in) :: bb
+  REAL(wp), DIMENSION(:,:,:), INTENT(in) :: bb_btm
+  REAL(wp), DIMENSION(:), INTENT(in) :: pfactor_sfc
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcpt_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcptgz
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pzthvvar
+  REAL(wp), DIMENSION(:), INTENT(in) :: pthvsig
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pztkevn
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pch_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pbn_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pbhn_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pbm_tile
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pbh_tile
+  
+  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
+  CHARACTER(len=256) :: ftg_c
+  
+  IF (ftg_vdiff_down_capture_output_active()) THEN
+    
+    CALL ftg_vdiff_down_init_for_capture('output', ftg_vdiff_down_output_dir)
+    CALL ftg_set_savepoint('output')
+    
+    WRITE (0,*) 'FTG ROUND vdiff_down ', ftg_vdiff_down_round, get_my_mpi_all_id()
+    WRITE (0,*) 'FTG WRITE output DATA vdiff_down', get_my_mpi_all_id()
+    
+    
+    ! BASIC ARGUMENTS
+    CALL ftg_write("pustar", pustar, LBOUND(pustar), UBOUND(pustar))
+    CALL ftg_write("pwstar", pwstar, LBOUND(pwstar), UBOUND(pwstar))
+    CALL ftg_write("pwstar_tile", pwstar_tile, LBOUND(pwstar_tile), UBOUND(pwstar_tile))
+    CALL ftg_write("pqsat_tile", pqsat_tile, LBOUND(pqsat_tile), UBOUND(pqsat_tile))
+    CALL ftg_write("pghpbl", pghpbl, LBOUND(pghpbl), UBOUND(pghpbl))
+    CALL ftg_write("pri", pri, LBOUND(pri), UBOUND(pri))
+    CALL ftg_write("pri_tile", pri_tile, LBOUND(pri_tile), UBOUND(pri_tile))
+    CALL ftg_write("pmixlen", pmixlen, LBOUND(pmixlen), UBOUND(pmixlen))
+    CALL ftg_write("pcfm", pcfm, LBOUND(pcfm), UBOUND(pcfm))
+    CALL ftg_write("pcfm_tile", pcfm_tile, LBOUND(pcfm_tile), UBOUND(pcfm_tile))
+    CALL ftg_write("pcfh", pcfh, LBOUND(pcfh), UBOUND(pcfh))
+    CALL ftg_write("pcfh_tile", pcfh_tile, LBOUND(pcfh_tile), UBOUND(pcfh_tile))
+    CALL ftg_write("pcfv", pcfv, LBOUND(pcfv), UBOUND(pcfv))
+    CALL ftg_write("pcftke", pcftke, LBOUND(pcftke), UBOUND(pcftke))
+    CALL ftg_write("pcfthv", pcfthv, LBOUND(pcfthv), UBOUND(pcfthv))
+    CALL ftg_write("aa", aa, LBOUND(aa), UBOUND(aa))
+    CALL ftg_write("aa_btm", aa_btm, LBOUND(aa_btm), UBOUND(aa_btm))
+    CALL ftg_write("bb", bb, LBOUND(bb), UBOUND(bb))
+    CALL ftg_write("bb_btm", bb_btm, LBOUND(bb_btm), UBOUND(bb_btm))
+    CALL ftg_write("pfactor_sfc", pfactor_sfc, LBOUND(pfactor_sfc), UBOUND(pfactor_sfc))
+    CALL ftg_write("pcpt_tile", pcpt_tile, LBOUND(pcpt_tile), UBOUND(pcpt_tile))
+    CALL ftg_write("pcptgz", pcptgz, LBOUND(pcptgz), UBOUND(pcptgz))
+    CALL ftg_write("pzthvvar", pzthvvar, LBOUND(pzthvvar), UBOUND(pzthvvar))
+    CALL ftg_write("pthvsig", pthvsig, LBOUND(pthvsig), UBOUND(pthvsig))
+    CALL ftg_write("pztkevn", pztkevn, LBOUND(pztkevn), UBOUND(pztkevn))
+    CALL ftg_write("pch_tile", pch_tile, LBOUND(pch_tile), UBOUND(pch_tile))
+    CALL ftg_write("pbn_tile", pbn_tile, LBOUND(pbn_tile), UBOUND(pbn_tile))
+    CALL ftg_write("pbhn_tile", pbhn_tile, LBOUND(pbhn_tile), UBOUND(pbhn_tile))
+    CALL ftg_write("pbm_tile", pbm_tile, LBOUND(pbm_tile), UBOUND(pbm_tile))
+    CALL ftg_write("pbh_tile", pbh_tile, LBOUND(pbh_tile), UBOUND(pbh_tile))
+    
+    
+    ! OPTIONAL ARGUMENTS
+    
+    ! TYPE MEMBERS
+    
+    
+    ! GLOBALS
+    CALL ftg_write("mo_echam_vdiff_params__da1", mo_echam_vdiff_params__da1)
+#ifdef __SPLINE_TEST__
+    CALL ftg_write("mo_convect_tables__dua", mo_convect_tables__dua, LBOUND(mo_convect_tables__dua), UBOUND(mo_convect_tables__dua))
+#endif
+    IF (ALLOCATED(mo_vdiff_solver__ibtm_mtrx)) THEN
+      CALL ftg_write("mo_vdiff_solver__ibtm_mtrx", mo_vdiff_solver__ibtm_mtrx, LBOUND(mo_vdiff_solver__ibtm_mtrx), UBOUND( &
+      &  mo_vdiff_solver__ibtm_mtrx))
+    END IF
+    IF (ALLOCATED(mo_vdiff_solver__ibtm_var)) THEN
+      CALL ftg_write("mo_vdiff_solver__ibtm_var", mo_vdiff_solver__ibtm_var, LBOUND(mo_vdiff_solver__ibtm_var), UBOUND( &
+      &  mo_vdiff_solver__ibtm_var))
+    END IF
+    CALL ftg_write("mo_vdiff_solver__ih", mo_vdiff_solver__ih)
+    CALL ftg_write("mo_vdiff_solver__imh", mo_vdiff_solver__imh)
+    CALL ftg_write("mo_vdiff_solver__imqv", mo_vdiff_solver__imqv)
+    CALL ftg_write("mo_vdiff_solver__iqv", mo_vdiff_solver__iqv)
+    CALL ftg_write("mo_vdiff_solver__ithv", mo_vdiff_solver__ithv)
+    CALL ftg_write("mo_vdiff_solver__itke", mo_vdiff_solver__itke)
+    CALL ftg_write("mo_echam_vdiff_params__itop", mo_echam_vdiff_params__itop)
+    CALL ftg_write("mo_vdiff_solver__itrc_start", mo_vdiff_solver__itrc_start)
+    CALL ftg_write("mo_vdiff_solver__iu", mo_vdiff_solver__iu)
+    CALL ftg_write("mo_vdiff_solver__iv", mo_vdiff_solver__iv)
+    CALL ftg_write("mo_vdiff_solver__ixi", mo_vdiff_solver__ixi)
+    CALL ftg_write("mo_vdiff_solver__ixl", mo_vdiff_solver__ixl)
+    CALL ftg_write("mo_vdiff_solver__ixv", mo_vdiff_solver__ixv)
+    CALL ftg_write("mo_convect_tables__lookupoverflow", mo_convect_tables__lookupoverflow)
+    IF (ALLOCATED(mo_vdiff_solver__matrix_idx)) THEN
+      CALL ftg_write("mo_vdiff_solver__matrix_idx", mo_vdiff_solver__matrix_idx, LBOUND(mo_vdiff_solver__matrix_idx), UBOUND( &
+      &  mo_vdiff_solver__matrix_idx))
+    END IF
+    CALL ftg_write("mo_vdiff_solver__nmatrix", mo_vdiff_solver__nmatrix)
+    CALL ftg_write("mo_vdiff_solver__nvar_vdiff", mo_vdiff_solver__nvar_vdiff)
+    CALL ftg_write("mo_echam_vdiff_params__tke_min", mo_echam_vdiff_params__tke_min)
+    CALL ftg_write("mo_convect_tables__tlucu", mo_convect_tables__tlucu, LBOUND(mo_convect_tables__tlucu), UBOUND( &
+    &  mo_convect_tables__tlucu))
+#ifdef __SPLINE_TEST__
+    CALL ftg_write("mo_convect_tables__ua", mo_convect_tables__ua, LBOUND(mo_convect_tables__ua), UBOUND(mo_convect_tables__ua))
+    CALL ftg_write("mo_convect_tables__za", mo_convect_tables__za, LBOUND(mo_convect_tables__za), UBOUND(mo_convect_tables__za))
+#endif
+    CALL ftg_register_only("mo_vdiff_config__vdiff_config", "TYPE(t_vdiff_config)")
+    CALL ftg_write("mo_vdiff_config__vdiff_config%lsfc_heat_flux", mo_vdiff_config__vdiff_config%lsfc_heat_flux)
+    CALL ftg_write("mo_vdiff_config__vdiff_config%lsfc_mom_flux", mo_vdiff_config__vdiff_config%lsfc_mom_flux)
+    
+    
+    CALL ftg_write("ftg_vdiff_down_round", ftg_vdiff_down_round)
+    
+    CALL ftg_destroy_savepoint()
+    WRITE (0,*) 'FTG FINALIZE output DATA vdiff_down', get_my_mpi_all_id()
+    CALL ftg_destroy_serializer()
+    
+    CALL work_mpi_barrier()
+!    CALL finish('FTG EXIT', 'Output captured: vdiff_down', 0)
+    
+  END IF
+  
+END SUBROUTINE ftg_vdiff_down_capture_output
+
+! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+
+
   !-------------
 
 END MODULE mo_vdiff_downward_sweep
