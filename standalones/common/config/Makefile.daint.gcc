export

SHELL = /bin/bash

ARCH = x86_64
OS   = linux-gnu

HOST = daint104
SITE = cscs.ch

srcdir = .


prefix = .
exec_prefix = build/x86_64-unknown-linux-gnu

bindir = ${exec_prefix}/bin
libdir = ${exec_prefix}/lib

NETCDFFROOT    = 
NETCDFROOT     = /opt/cray/pe/netcdf/4.4.1.1.3/GNU/5.1
NETCDFLIBPATH  = /opt/cray/pe/netcdf/4.4.1.1.3/GNU/5.1/lib
NETCDF_LIB     = -L$(NETCDFLIBPATH) -lnetcdff -lnetcdf
NETCDF_INCLUDE = -I$(NETCDFROOT)/include

CDIROOT     = 
CDILIBPATH  = 
CDI_LIB     = 
CDI_INCLUDE = 

HDF5ROOT       = /opt/cray/pe/hdf5/1.10.0.3/GNU/5.1
HDF5_LIB       = -L$(HDF5ROOT)/lib -lhdf5_hl -lhdf5
HDF5_INCLUDE   = -I$(HDF5ROOT)/include

SZIPROOT       = 
SZIP_LIB       = 
SZIP_INCLUDE   = 

ZLIBROOT       = /usr
ZLIB_LIB       = -L$(ZLIBROOT)/lib64 -lz
ZLIB_INCLUDE   = -I$(ZLIBROOT)/include

GRIBAPIROOT    = /apps/daint/UES/6.0.UP02/sandbox-ws/grib_api
GRIBAPI_LIB    = -L$(GRIBAPIROOT)/lib -Wl,-rpath,$(GRIBAPIROOT)/lib -lgrib_api
GRIBAPI_INCLUDE= -I$(GRIBAPIROOT)/include

SCTROOT        = 
SCT_LIB        = 
SCT_INCLUDE    = 

XML2ROOT       = /apps/daint/UES/jenkins/6.0.UP02/gpu/easybuild/software/libxml2/2.9.3-CrayGNU-2016.11
XML2_LIB       = -L$(XML2ROOT)/lib -lxml2
XML2_INCLUDE   = -I$(XML2ROOT)/include/libxml2

MPIROOT        = 
MPI_LIB        = 
MPI_INCLUDE    = 

LAPACKROOT     = /opt/cray/pe/libsci/17.06.1/GNU/5.1/x86_64
LAPACK_LIB_PATH= 
LAPACK_LIB     = -L$(LAPACKROOT)/lib -lsci_gnu

PROFILE_LIB     = 
PROFILE_INCLUDE = 

SERIALBOX2ROOT        = /project/c14/install/daint/serialbox2/gnu
SERIALBOX2_LIB        = 
SERIALBOX2_INCLUDE    = 

OTHER_LIBS     = -L/apps/daint/UES/6.0.UP02/sandbox-ws/jasper/2.0.10/GNU/5.3.0/lib -ljasper -dynamic -L/usr/lib64 -llzma -L$(SERIALBOX2ROOT)/lib -l:libSerialboxFortran.a -lstdc++fs -lstdc++

LIBS           = -L../lib -lsupport  -lyac -ltixi -lmtime -lself $(LAPACK_LIB) $(NETCDF_LIB) $(CDI_LIB) $(HDF5_LIB) $(SZIP_LIB) $(ZLIB_LIB) $(GRIBAPI_LIB) $(XML2_LIB) $(MPI_LIB) $(PROFILE_LIB) $(SCT_LIB) $(OTHER_LIBS) $(SERIALBOX2_LIB)
INCLUDE        = -I../include -I../../../src/include  $(MPI_INCLUDE) $(NETCDF_INCLUDE) $(CDI_INCLUDE) $(HDF5_INCLUDE) $(SZIP_INCLUDE) $(ZLIB_INCLUDE) $(GRIBAPI_INCLUDE) $(XML2_INCLUDE) $(PROFILE_INCLUDE) $(SCT_INCLUDE) $(SERIALBOX2_INCLUDE)
INCLUDES       = $(INCLUDE)

AS             = as

CC             = cc
CFLAGS         = $(INCLUDE) -DgFortran -DHAVE_LIBNETCDF -DHAVE_NETCDF2 -DHAVE_NETCDF4 -D__ICON__ -DUSE_XML2 -DHAVE_C_NETCDF -DHAVE_LIBGRIB -DHAVE_LIBGRIB_API -I/scratch/snx3000/pmarti/latest-icon-eniac/build/x86_64-unknown-linux-gnu/include -DUSE_MPI
FC             = ftn
FFLAGS         = $(INCLUDES) -J../module -I../src -I../support -I../module -cpp -std=f2008 -fmodule-private -fimplicit-none -fmax-identifier-length=63 -ffree-line-length-none -Wall -Wcharacter-truncation -Wconversion -Wunderflow -Wunused-parameter -Wno-surprising -I$(SERIALBOX2ROOT)/include -D__ICON__ -D__NO_ICON_TESTBED__ -DUSE_XML2 -DHAVE_LIBGRIB -DHAVE_LIBGRIB_API -DYAC_coupling -DUSE_MPI -fall-intrinsics -g    -march=native -O2 -mpc64 -D__LOOP_EXCHANGE 
FlibFLAGS      = $(INCLUDES) -J../module 
F77            = ftn
F77FLAGS       = -march=native -O0 -ffast-math -mpc64 -g    -march=native -O2 -mpc64 -D__LOOP_EXCHANGE 

AR             = ar
ARFLAGS        = crv

LDFLAGS        = -march=native -O3 -ffast-math -D__LOOP_EXCHANGE

SRCDIRS        = externals/yac/src externals/self/src externals/mtime/src externals/tixi/src support src
OBJDIRS        =  build/x86_64-unknown-linux-gnu/externals/yac/src build/x86_64-unknown-linux-gnu/externals/self/src build/x86_64-unknown-linux-gnu/externals/mtime/src build/x86_64-unknown-linux-gnu/externals/tixi/src build/x86_64-unknown-linux-gnu/support build/x86_64-unknown-linux-gnu/src

ECHO_N = -n

.PHONY: doc

all:
	@for DIR in $(OBJDIRS) ;\
	  do \
	    back=`pwd`; \
	    cd $$DIR && $(MAKE) ; status=$$? ; \
	    if [ $$status != 0 ] ; then \
	      echo "Exit status from make was $$status" ; exit $$status ; \
	    fi ; \
	    cd $$back ; \
	  done 
model:
	@for DIR in $(OBJDIRS) ;\
	  do LASTDIR=$$DIR ;\
	done ;\
	back=`pwd` ;\
	cd $$LASTDIR && $(MAKE) icon  ;\
	cd $$back

one:
	@for DIR in $(OBJDIRS) ;\
	  do LASTDIR=$$DIR ;\
	done ;\
	back=`pwd` ;\
	cd $$LASTDIR && $(MAKE) $(name)  ;\
	cd $$back


install:
	@for DIR in $(OBJDIRS) ;\
	  do \
	  (cd $$DIR && $(MAKE) install ; if [ $$? != 0 ] ; then \
	        echo "Exit status from make was $$?" ; exit 1 ; fi ;) ;\
	  done

clean:
	@for DIR in $(OBJDIRS) ;\
	  do \
	  (cd $$DIR && $(MAKE) clean ; if [ $$? != 0 ] ; then \
	        echo "Exit status from make was $$?" ; exit 1 ; fi ;) ;\
	  done
	-rm -f ${exec_prefix}/bin/*
	-rm -f ${exec_prefix}/lib/*.a
	-rm -f ${exec_prefix}/module/*.mod  
	-rm -f ${exec_prefix}/src/*.o   
	-rm -rf html/[a-z]*

distclean:
	-rm -rf build
	-rm Makefile
	-rm build_command
	-rm config.log
	-rm config.status
	-rm config/config.h
	-rm config/mh-config-use
	-rm config/set-up.info
	-rm -rf doc/html
	-rm -rf doc/latex
	-rm -rf html/[a-z]*
	-rm -f src/messy_interface
	-rm -f src/lnd_phy_jsbach 

doc:
	doxygen doc/resources/doxyfile_icon_html
	@echo 
	@echo "Start of HTML documentation: doc/html/index.html"
	@echo 

pdf: 
	doxygen doc/resources/doxyfile_icon_pdf

index:
	-rm -rf html/[a-z]*
	scripts/f2html_scripts/f2html.pl -f scripts/f2html_scripts/fgenrc -d html $(SRCDIRS)

checkstyle:
	scripts/code_processing/process_src -v


check:
	@. config/set-up.info ; \
	mpi_total_procs=4 ; \
	for testprog in $(exec_prefix)/bin/test_* ; do \
	echo $(ECHO_N) "$$testprog: " | sed -e 's/^.*\///'; \
	case "$$testprog" in  *_mp|*_mpi) \
	eval $$use_mpi_startrun \"\$$testprog\" && echo "SUCCESS" \
	|| echo "ERROR" ;; \
	*) "$$testprog" && echo "SUCCESS" || echo "ERROR" ;; \
	esac ; done
