--- eniac_a/src/atm_phy_echam/mo_vdiff_upward_sweep.f90	2018-10-30 12:31:00.820890000 +0100
+++ eniac_b/src/atm_phy_echam/mo_vdiff_upward_sweep.f90	2018-10-30 12:30:50.421517000 +0100
@@ -29,6 +29,27 @@
   PRIVATE
   PUBLIC :: vdiff_up
 
+
+  ! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+  
+  LOGICAL :: ftg_vdiff_up_capture_input_enabled = .TRUE.
+  LOGICAL :: ftg_vdiff_up_capture_output_enabled = .TRUE.
+  INTEGER :: ftg_vdiff_up_capture_round = 1
+  INTEGER :: ftg_vdiff_up_round = 0
+  CHARACTER(len=1024) :: ftg_vdiff_up_input_dir = &
+  '++FTGDATADIR++/data/input'
+  CHARACTER(len=1024) :: ftg_vdiff_up_output_dir = &
+  '++FTGDATADIR++/data/output'
+  
+  PUBLIC :: ftg_vdiff_up_capture_input_enabled, ftg_vdiff_up_capture_output_enabled, ftg_vdiff_up_capture_round, &
+  &  ftg_vdiff_up_input_dir, ftg_vdiff_up_output_dir
+  
+  
+  
+  
+  ! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+  
+
 CONTAINS
   !>
   !!
@@ -117,6 +138,17 @@
     REAL(wp),INTENT(OUT) :: psh_vdiff (kbdim)      ! sens. heat flux
     REAL(wp),INTENT(OUT) :: pqv_vdiff (kbdim)      ! qv flux
 
+  ! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+  
+  ftg_vdiff_up_round = ftg_vdiff_up_round + 1
+  CALL ftg_vdiff_up_capture_input(jcs, kproma, kbdim, klev, klevm1, ktrac, ksfc_type, idx_wtr, pdtime, pfrc, pcfm_tile, aa, &
+  &  pcptgz, pum1, pvm1, ptm1, pmair, pmref, pqm1, pxlm1, pxim1, pxtm1, pgeom1, pztottevn, bb, pzthvvar, pxvar, pz0m_tile, &
+  &  pkedisp, pute_vdf, pvte_vdf, pq_vdf, pqte_vdf, pxlte_vdf, pxite_vdf, pxtte_vdf, pz0m, pthvvar, ptotte, psh_vdiff, pqv_vdiff)
+  
+  ! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+  
+
+
     !$acc data &
     !$acc present(pum1,pvm1,ptm1,pmair,pmref,pqm1,pxlm1,pxim1,pxtm1) &
     !$acc present(pgeom1,pcptgz,pztottevn,pzthvvar,pcfm_tile,pfrc,aa,bb)   &
@@ -153,7 +185,494 @@
 
     !$acc end data
 
+
+  ! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+  
+  CALL ftg_vdiff_up_capture_output(bb, pxvar, pz0m_tile, pkedisp, pute_vdf, pvte_vdf, pq_vdf, pqte_vdf, pxlte_vdf, pxite_vdf, &
+  &  pxtte_vdf, pz0m, pthvvar, ptotte, psh_vdiff, pqv_vdiff)
+  
+  ! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+  
+
   END SUBROUTINE vdiff_up
+
+! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+
+SUBROUTINE ftg_vdiff_up_init_for_capture(stage, dir)
+  
+  USE mo_impl_constants, ONLY: MAX_CHAR_LENGTH
+  USE mo_mpi,            ONLY: get_my_mpi_all_id
+  USE m_ser_ftg,         ONLY: ftg_set_serializer, ftg_add_serializer_metainfo, ignore_bullshit_max_dim_size, &
+  &  ignore_bullshit_allow_negative_indices, ignore_bullshit
+  
+  CHARACTER(*), INTENT(IN) :: stage, dir
+  
+  CHARACTER(len=MAX_CHAR_LENGTH) :: basename, mkdirerr
+  
+  WRITE (basename,'(a,a,a,i0)') 'ftg_vdiff_up_', TRIM(stage), '_', get_my_mpi_all_id()
+  
+  WRITE (0,*) 'FTG INIT vdiff_up '//TRIM(basename), get_my_mpi_all_id()
+  
+  mkdirerr = ''
+  !  CALL EXECUTE_COMMAND_LINE('mkdir -p '//TRIM(dir), cmdmsg=mkdirerr)
+  !  IF (TRIM(mkdirerr) /= '') THEN
+    !    WRITE (0,*) 'FTG INIT *** ERROR: ', TRIM(mkdirerr)
+    !  END IF
+    
+    ignore_bullshit = .FALSE.
+    ignore_bullshit_max_dim_size = 100000
+    ignore_bullshit_allow_negative_indices = .TRUE.
+    
+    CALL ftg_set_serializer(TRIM(dir), TRIM(basename), 'w')
+    CALL ftg_add_serializer_metainfo('subroutine', 'vdiff_up')
+    CALL ftg_add_serializer_metainfo('stage', stage)
+    CALL ftg_add_serializer_metainfo('mpi_all_id', get_my_mpi_all_id())
+    
+  END SUBROUTINE ftg_vdiff_up_init_for_capture
+  
+  LOGICAL FUNCTION ftg_vdiff_up_capture_input_active()
+  
+  ftg_vdiff_up_capture_input_active =       &
+  ftg_vdiff_up_capture_input_enabled .AND.  &
+  ftg_vdiff_up_round .EQ. ftg_vdiff_up_capture_round
+  
+END FUNCTION ftg_vdiff_up_capture_input_active
+
+SUBROUTINE ftg_vdiff_up_capture_input(jcs, kproma, kbdim, klev, klevm1, ktrac, ksfc_type, idx_wtr, pdtime, pfrc, pcfm_tile, aa, &
+&  pcptgz, pum1, pvm1, ptm1, pmair, pmref, pqm1, pxlm1, pxim1, pxtm1, pgeom1, pztottevn, bb, pzthvvar, pxvar, pz0m_tile, pkedisp, &
+&  pute_vdf, pvte_vdf, pq_vdf, pqte_vdf, pxlte_vdf, pxite_vdf, pxtte_vdf, pz0m, pthvvar, ptotte, psh_vdiff, pqv_vdiff)
+  
+  USE mtime,     ONLY: calendarType
+  USE mo_mpi,    ONLY: get_my_mpi_all_id
+  USE m_ser_ftg, ONLY: ftg_set_savepoint, ftg_write, ftg_register_only, ftg_destroy_savepoint, ftg_destroy_serializer
+  USE timing_tools, ONLY: start_loc_timing, end_loc_timing
+  
+  USE mo_vdiff_solver, ONLY: mo_vdiff_solver__iqv => iqv, mo_vdiff_solver__ixl => ixl, mo_vdiff_solver__ixi => ixi, &
+  &  mo_vdiff_solver__nmatrix => nmatrix, mo_vdiff_solver__itotte => itotte, mo_vdiff_solver__matrix_idx => matrix_idx, &
+  &  mo_vdiff_solver__ibtm_var => ibtm_var, mo_vdiff_solver__itrc_start => itrc_start, mo_vdiff_solver__iv => iv, &
+  &  mo_vdiff_solver__nvar_vdiff => nvar_vdiff, mo_vdiff_solver__ithv => ithv, mo_vdiff_solver__iu => iu, mo_vdiff_solver__ixv => &
+  &  ixv, mo_vdiff_solver__ih => ih
+  USE mo_echam_vdiff_params, ONLY: mo_echam_vdiff_params__itop => itop
+  
+  INTEGER, INTENT(in) :: jcs
+  INTEGER, INTENT(in) :: kproma
+  INTEGER, INTENT(in) :: kbdim
+  INTEGER, INTENT(in) :: klev
+  INTEGER, INTENT(in) :: klevm1
+  INTEGER, INTENT(in) :: ktrac
+  INTEGER, INTENT(in) :: ksfc_type
+  INTEGER, INTENT(in) :: idx_wtr
+  REAL(wp), INTENT(in) :: pdtime
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pfrc
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcfm_tile
+  REAL(wp), DIMENSION(:,:,:,:), INTENT(in) :: aa
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pcptgz
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pum1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pvm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: ptm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pmair
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pmref
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pqm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxlm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxim1
+  REAL(wp), DIMENSION(:,:,:), INTENT(in) :: pxtm1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pgeom1
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pztottevn
+  REAL(wp), DIMENSION(:,:,:), INTENT(in) :: bb
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pzthvvar
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxvar
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pz0m_tile
+  REAL(wp), DIMENSION(:), INTENT(in) :: pkedisp
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pute_vdf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pvte_vdf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pq_vdf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pqte_vdf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxlte_vdf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxite_vdf
+  REAL(wp), DIMENSION(:,:,:), INTENT(in) :: pxtte_vdf
+  REAL(wp), DIMENSION(:), INTENT(in) :: pz0m
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pthvvar
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: ptotte
+  REAL(wp), DIMENSION(:), INTENT(in) :: psh_vdiff
+  REAL(wp), DIMENSION(:), INTENT(in) :: pqv_vdiff
+  
+  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
+  CHARACTER(len=256) :: ftg_c
+  
+  IF (ftg_vdiff_up_capture_input_active()) THEN
+    CALL start_loc_timing("vdiff_up: FTG capture input", 10)
+    
+    CALL ftg_vdiff_up_init_for_capture('input', ftg_vdiff_up_input_dir)
+    CALL ftg_set_savepoint('input')
+    
+    WRITE (0,*) 'FTG ROUND vdiff_up ', ftg_vdiff_up_round, get_my_mpi_all_id()
+    WRITE (0,*) 'FTG WRITE INPUT DATA vdiff_up', get_my_mpi_all_id()
+    
+    ! MTIME CALENDAR TYPE --> Remove this line if mtime is not used
+    CALL ftg_write("ftg_mtime_calendar", calendarType())
+    
+    ! BASIC ARGUMENTS
+    CALL ftg_write("jcs", jcs)
+    CALL ftg_write("kproma", kproma)
+    CALL ftg_write("kbdim", kbdim)
+    CALL ftg_write("klev", klev)
+    CALL ftg_write("klevm1", klevm1)
+    CALL ftg_write("ktrac", ktrac)
+    CALL ftg_write("ksfc_type", ksfc_type)
+    CALL ftg_write("idx_wtr", idx_wtr)
+    CALL ftg_write("pdtime", pdtime)
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pfrc)
+    !$ACC UPDATE HOST(pfrc)
+#endif
+    CALL ftg_write("pfrc", pfrc, LBOUND(pfrc), UBOUND(pfrc))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pcfm_tile)
+    !$ACC UPDATE HOST(pcfm_tile)
+#endif
+    CALL ftg_write("pcfm_tile", pcfm_tile, LBOUND(pcfm_tile), UBOUND(pcfm_tile))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_aa)
+    !$ACC UPDATE HOST(aa)
+#endif
+    CALL ftg_write("aa", aa, LBOUND(aa), UBOUND(aa))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pcptgz)
+    !$ACC UPDATE HOST(pcptgz)
+#endif
+    CALL ftg_write("pcptgz", pcptgz, LBOUND(pcptgz), UBOUND(pcptgz))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pum1)
+    !$ACC UPDATE HOST(pum1)
+#endif
+    CALL ftg_write("pum1", pum1, LBOUND(pum1), UBOUND(pum1))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pvm1)
+    !$ACC UPDATE HOST(pvm1)
+#endif
+    CALL ftg_write("pvm1", pvm1, LBOUND(pvm1), UBOUND(pvm1))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_ptm1)
+    !$ACC UPDATE HOST(ptm1)
+#endif
+    CALL ftg_write("ptm1", ptm1, LBOUND(ptm1), UBOUND(ptm1))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pmair)
+    !$ACC UPDATE HOST(pmair)
+#endif
+    CALL ftg_write("pmair", pmair, LBOUND(pmair), UBOUND(pmair))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pmref)
+    !$ACC UPDATE HOST(pmref)
+#endif
+    CALL ftg_write("pmref", pmref, LBOUND(pmref), UBOUND(pmref))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pqm1)
+    !$ACC UPDATE HOST(pqm1)
+#endif
+    CALL ftg_write("pqm1", pqm1, LBOUND(pqm1), UBOUND(pqm1))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxlm1)
+    !$ACC UPDATE HOST(pxlm1)
+#endif
+    CALL ftg_write("pxlm1", pxlm1, LBOUND(pxlm1), UBOUND(pxlm1))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxim1)
+    !$ACC UPDATE HOST(pxim1)
+#endif
+    CALL ftg_write("pxim1", pxim1, LBOUND(pxim1), UBOUND(pxim1))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxtm1)
+    !$ACC UPDATE HOST(pxtm1)
+#endif
+    CALL ftg_write("pxtm1", pxtm1, LBOUND(pxtm1), UBOUND(pxtm1))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pgeom1)
+    !$ACC UPDATE HOST(pgeom1)
+#endif
+    CALL ftg_write("pgeom1", pgeom1, LBOUND(pgeom1), UBOUND(pgeom1))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pztottevn)
+    !$ACC UPDATE HOST(pztottevn)
+#endif
+    CALL ftg_write("pztottevn", pztottevn, LBOUND(pztottevn), UBOUND(pztottevn))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_bb)
+    !$ACC UPDATE HOST(bb)
+#endif
+    CALL ftg_write("bb", bb, LBOUND(bb), UBOUND(bb))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pzthvvar)
+    !$ACC UPDATE HOST(pzthvvar)
+#endif
+    CALL ftg_write("pzthvvar", pzthvvar, LBOUND(pzthvvar), UBOUND(pzthvvar))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxvar)
+    !$ACC UPDATE HOST(pxvar)
+#endif
+    CALL ftg_write("pxvar", pxvar, LBOUND(pxvar), UBOUND(pxvar))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pz0m_tile)
+    !$ACC UPDATE HOST(pz0m_tile)
+#endif
+    CALL ftg_write("pz0m_tile", pz0m_tile, LBOUND(pz0m_tile), UBOUND(pz0m_tile))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pkedisp)
+    !$ACC UPDATE HOST(pkedisp)
+#endif
+    CALL ftg_write("pkedisp", pkedisp, LBOUND(pkedisp), UBOUND(pkedisp))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pute_vdf)
+    !$ACC UPDATE HOST(pute_vdf)
+#endif
+    CALL ftg_write("pute_vdf", pute_vdf, LBOUND(pute_vdf), UBOUND(pute_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pvte_vdf)
+    !$ACC UPDATE HOST(pvte_vdf)
+#endif
+    CALL ftg_write("pvte_vdf", pvte_vdf, LBOUND(pvte_vdf), UBOUND(pvte_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pq_vdf)
+    !$ACC UPDATE HOST(pq_vdf)
+#endif
+    CALL ftg_write("pq_vdf", pq_vdf, LBOUND(pq_vdf), UBOUND(pq_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pqte_vdf)
+    !$ACC UPDATE HOST(pqte_vdf)
+#endif
+    CALL ftg_write("pqte_vdf", pqte_vdf, LBOUND(pqte_vdf), UBOUND(pqte_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxlte_vdf)
+    !$ACC UPDATE HOST(pxlte_vdf)
+#endif
+    CALL ftg_write("pxlte_vdf", pxlte_vdf, LBOUND(pxlte_vdf), UBOUND(pxlte_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxite_vdf)
+    !$ACC UPDATE HOST(pxite_vdf)
+#endif
+    CALL ftg_write("pxite_vdf", pxite_vdf, LBOUND(pxite_vdf), UBOUND(pxite_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxtte_vdf)
+    !$ACC UPDATE HOST(pxtte_vdf)
+#endif
+    CALL ftg_write("pxtte_vdf", pxtte_vdf, LBOUND(pxtte_vdf), UBOUND(pxtte_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pz0m)
+    !$ACC UPDATE HOST(pz0m)
+#endif
+    CALL ftg_write("pz0m", pz0m, LBOUND(pz0m), UBOUND(pz0m))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pthvvar)
+    !$ACC UPDATE HOST(pthvvar)
+#endif
+    CALL ftg_write("pthvvar", pthvvar, LBOUND(pthvvar), UBOUND(pthvvar))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_ptotte)
+    !$ACC UPDATE HOST(ptotte)
+#endif
+    CALL ftg_write("ptotte", ptotte, LBOUND(ptotte), UBOUND(ptotte))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_psh_vdiff)
+    !$ACC UPDATE HOST(psh_vdiff)
+#endif
+    CALL ftg_write("psh_vdiff", psh_vdiff, LBOUND(psh_vdiff), UBOUND(psh_vdiff))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pqv_vdiff)
+    !$ACC UPDATE HOST(pqv_vdiff)
+#endif
+    CALL ftg_write("pqv_vdiff", pqv_vdiff, LBOUND(pqv_vdiff), UBOUND(pqv_vdiff))
+    
+    
+    ! OPTIONAL ARGUMENTS
+    
+    ! TYPE MEMBERS
+    
+    
+    ! GLOBALS
+    IF (ALLOCATED(mo_vdiff_solver__ibtm_var)) THEN
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_mo_vdiff_solver__ibtm_var)
+      !$ACC UPDATE HOST(mo_vdiff_solver__ibtm_var)
+#endif
+      CALL ftg_write("mo_vdiff_solver__ibtm_var", mo_vdiff_solver__ibtm_var, LBOUND(mo_vdiff_solver__ibtm_var), UBOUND( &
+      &  mo_vdiff_solver__ibtm_var))
+    END IF
+    CALL ftg_write("mo_vdiff_solver__ih", mo_vdiff_solver__ih)
+    CALL ftg_write("mo_vdiff_solver__iqv", mo_vdiff_solver__iqv)
+    CALL ftg_write("mo_vdiff_solver__ithv", mo_vdiff_solver__ithv)
+    CALL ftg_write("mo_echam_vdiff_params__itop", mo_echam_vdiff_params__itop)
+    CALL ftg_write("mo_vdiff_solver__itotte", mo_vdiff_solver__itotte)
+    CALL ftg_write("mo_vdiff_solver__itrc_start", mo_vdiff_solver__itrc_start)
+    CALL ftg_write("mo_vdiff_solver__iu", mo_vdiff_solver__iu)
+    CALL ftg_write("mo_vdiff_solver__iv", mo_vdiff_solver__iv)
+    CALL ftg_write("mo_vdiff_solver__ixi", mo_vdiff_solver__ixi)
+    CALL ftg_write("mo_vdiff_solver__ixl", mo_vdiff_solver__ixl)
+    CALL ftg_write("mo_vdiff_solver__ixv", mo_vdiff_solver__ixv)
+    IF (ALLOCATED(mo_vdiff_solver__matrix_idx)) THEN
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_mo_vdiff_solver__matrix_idx)
+      !$ACC UPDATE HOST(mo_vdiff_solver__matrix_idx)
+#endif
+      CALL ftg_write("mo_vdiff_solver__matrix_idx", mo_vdiff_solver__matrix_idx, LBOUND(mo_vdiff_solver__matrix_idx), UBOUND( &
+      &  mo_vdiff_solver__matrix_idx))
+    END IF
+    CALL ftg_write("mo_vdiff_solver__nmatrix", mo_vdiff_solver__nmatrix)
+    CALL ftg_write("mo_vdiff_solver__nvar_vdiff", mo_vdiff_solver__nvar_vdiff)
+    
+    
+    CALL ftg_write("ftg_vdiff_up_round", ftg_vdiff_up_round)
+    
+    CALL ftg_destroy_savepoint()
+    WRITE (0,*) 'FTG FINALIZE INPUT DATA vdiff_up', get_my_mpi_all_id()
+    CALL ftg_destroy_serializer()
+    
+    CALL end_loc_timing(10)
+  END IF
+  
+  CALL start_loc_timing("vdiff_up: computation", 11)
+  
+END SUBROUTINE ftg_vdiff_up_capture_input
+
+LOGICAL FUNCTION ftg_vdiff_up_capture_output_active()
+
+ftg_vdiff_up_capture_output_active =       &
+ftg_vdiff_up_capture_output_enabled .AND.  &
+ftg_vdiff_up_round .EQ. ftg_vdiff_up_capture_round
+
+END FUNCTION ftg_vdiff_up_capture_output_active
+
+SUBROUTINE ftg_vdiff_up_capture_output(bb, pxvar, pz0m_tile, pkedisp, pute_vdf, pvte_vdf, pq_vdf, pqte_vdf, pxlte_vdf, pxite_vdf, &
+&  pxtte_vdf, pz0m, pthvvar, ptotte, psh_vdiff, pqv_vdiff)
+  
+  USE mo_mpi, ONLY: work_mpi_barrier, get_my_mpi_all_id
+  USE mo_exception, ONLY: finish
+  USE m_ser_ftg, ONLY: ftg_set_savepoint, ftg_write, ftg_register_only, ftg_destroy_savepoint, ftg_destroy_serializer
+  USE timing_tools, ONLY: start_loc_timing, end_loc_timing
+  
+  USE mo_vdiff_solver, ONLY: mo_vdiff_solver__iqv => iqv, mo_vdiff_solver__ixl => ixl, mo_vdiff_solver__ixi => ixi, &
+  &  mo_vdiff_solver__nmatrix => nmatrix, mo_vdiff_solver__itotte => itotte, mo_vdiff_solver__matrix_idx => matrix_idx, &
+  &  mo_vdiff_solver__ibtm_var => ibtm_var, mo_vdiff_solver__itrc_start => itrc_start, mo_vdiff_solver__iv => iv, &
+  &  mo_vdiff_solver__nvar_vdiff => nvar_vdiff, mo_vdiff_solver__ithv => ithv, mo_vdiff_solver__iu => iu, mo_vdiff_solver__ixv => &
+  &  ixv, mo_vdiff_solver__ih => ih
+  USE mo_echam_vdiff_params, ONLY: mo_echam_vdiff_params__itop => itop
+  
+  REAL(wp), DIMENSION(:,:,:), INTENT(in) :: bb
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxvar
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pz0m_tile
+  REAL(wp), DIMENSION(:), INTENT(in) :: pkedisp
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pute_vdf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pvte_vdf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pq_vdf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pqte_vdf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxlte_vdf
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pxite_vdf
+  REAL(wp), DIMENSION(:,:,:), INTENT(in) :: pxtte_vdf
+  REAL(wp), DIMENSION(:), INTENT(in) :: pz0m
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: pthvvar
+  REAL(wp), DIMENSION(:,:), INTENT(in) :: ptotte
+  REAL(wp), DIMENSION(:), INTENT(in) :: psh_vdiff
+  REAL(wp), DIMENSION(:), INTENT(in) :: pqv_vdiff
+  
+  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
+  CHARACTER(len=256) :: ftg_c
+  
+  CALL end_loc_timing(11)
+  
+  IF (ftg_vdiff_up_capture_output_active()) THEN
+    CALL start_loc_timing("vdiff_up: FTG capture output", 19)
+    
+    CALL ftg_vdiff_up_init_for_capture('output', ftg_vdiff_up_output_dir)
+    CALL ftg_set_savepoint('output')
+    
+    WRITE (0,*) 'FTG ROUND vdiff_up ', ftg_vdiff_up_round, get_my_mpi_all_id()
+    WRITE (0,*) 'FTG WRITE output DATA vdiff_up', get_my_mpi_all_id()
+    
+    
+    ! BASIC ARGUMENTS
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_bb)
+    !$ACC UPDATE HOST(bb)
+#endif
+    CALL ftg_write("bb", bb, LBOUND(bb), UBOUND(bb))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxvar)
+    !$ACC UPDATE HOST(pxvar)
+#endif
+    CALL ftg_write("pxvar", pxvar, LBOUND(pxvar), UBOUND(pxvar))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pz0m_tile)
+    !$ACC UPDATE HOST(pz0m_tile)
+#endif
+    CALL ftg_write("pz0m_tile", pz0m_tile, LBOUND(pz0m_tile), UBOUND(pz0m_tile))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pkedisp)
+    !$ACC UPDATE HOST(pkedisp)
+#endif
+    CALL ftg_write("pkedisp", pkedisp, LBOUND(pkedisp), UBOUND(pkedisp))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pute_vdf)
+    !$ACC UPDATE HOST(pute_vdf)
+#endif
+    CALL ftg_write("pute_vdf", pute_vdf, LBOUND(pute_vdf), UBOUND(pute_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pvte_vdf)
+    !$ACC UPDATE HOST(pvte_vdf)
+#endif
+    CALL ftg_write("pvte_vdf", pvte_vdf, LBOUND(pvte_vdf), UBOUND(pvte_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pq_vdf)
+    !$ACC UPDATE HOST(pq_vdf)
+#endif
+    CALL ftg_write("pq_vdf", pq_vdf, LBOUND(pq_vdf), UBOUND(pq_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pqte_vdf)
+    !$ACC UPDATE HOST(pqte_vdf)
+#endif
+    CALL ftg_write("pqte_vdf", pqte_vdf, LBOUND(pqte_vdf), UBOUND(pqte_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxlte_vdf)
+    !$ACC UPDATE HOST(pxlte_vdf)
+#endif
+    CALL ftg_write("pxlte_vdf", pxlte_vdf, LBOUND(pxlte_vdf), UBOUND(pxlte_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxite_vdf)
+    !$ACC UPDATE HOST(pxite_vdf)
+#endif
+    CALL ftg_write("pxite_vdf", pxite_vdf, LBOUND(pxite_vdf), UBOUND(pxite_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pxtte_vdf)
+    !$ACC UPDATE HOST(pxtte_vdf)
+#endif
+    CALL ftg_write("pxtte_vdf", pxtte_vdf, LBOUND(pxtte_vdf), UBOUND(pxtte_vdf))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pz0m)
+    !$ACC UPDATE HOST(pz0m)
+#endif
+    CALL ftg_write("pz0m", pz0m, LBOUND(pz0m), UBOUND(pz0m))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pthvvar)
+    !$ACC UPDATE HOST(pthvvar)
+#endif
+    CALL ftg_write("pthvvar", pthvvar, LBOUND(pthvvar), UBOUND(pthvvar))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_ptotte)
+    !$ACC UPDATE HOST(ptotte)
+#endif
+    CALL ftg_write("ptotte", ptotte, LBOUND(ptotte), UBOUND(ptotte))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_psh_vdiff)
+    !$ACC UPDATE HOST(psh_vdiff)
+#endif
+    CALL ftg_write("psh_vdiff", psh_vdiff, LBOUND(psh_vdiff), UBOUND(psh_vdiff))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_pqv_vdiff)
+    !$ACC UPDATE HOST(pqv_vdiff)
+#endif
+    CALL ftg_write("pqv_vdiff", pqv_vdiff, LBOUND(pqv_vdiff), UBOUND(pqv_vdiff))
+    
+    
+    ! OPTIONAL ARGUMENTS
+    
+    ! TYPE MEMBERS
+    
+    
+    ! GLOBALS
+    IF (ALLOCATED(mo_vdiff_solver__ibtm_var)) THEN
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_mo_vdiff_solver__ibtm_var)
+      !$ACC UPDATE HOST(mo_vdiff_solver__ibtm_var)
+#endif
+      CALL ftg_write("mo_vdiff_solver__ibtm_var", mo_vdiff_solver__ibtm_var, LBOUND(mo_vdiff_solver__ibtm_var), UBOUND( &
+      &  mo_vdiff_solver__ibtm_var))
+    END IF
+    CALL ftg_write("mo_vdiff_solver__ih", mo_vdiff_solver__ih)
+    CALL ftg_write("mo_vdiff_solver__iqv", mo_vdiff_solver__iqv)
+    CALL ftg_write("mo_vdiff_solver__ithv", mo_vdiff_solver__ithv)
+    CALL ftg_write("mo_echam_vdiff_params__itop", mo_echam_vdiff_params__itop)
+    CALL ftg_write("mo_vdiff_solver__itotte", mo_vdiff_solver__itotte)
+    CALL ftg_write("mo_vdiff_solver__itrc_start", mo_vdiff_solver__itrc_start)
+    CALL ftg_write("mo_vdiff_solver__iu", mo_vdiff_solver__iu)
+    CALL ftg_write("mo_vdiff_solver__iv", mo_vdiff_solver__iv)
+    CALL ftg_write("mo_vdiff_solver__ixi", mo_vdiff_solver__ixi)
+    CALL ftg_write("mo_vdiff_solver__ixl", mo_vdiff_solver__ixl)
+    CALL ftg_write("mo_vdiff_solver__ixv", mo_vdiff_solver__ixv)
+    IF (ALLOCATED(mo_vdiff_solver__matrix_idx)) THEN
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_mo_vdiff_solver__matrix_idx)
+      !$ACC UPDATE HOST(mo_vdiff_solver__matrix_idx)
+#endif
+      CALL ftg_write("mo_vdiff_solver__matrix_idx", mo_vdiff_solver__matrix_idx, LBOUND(mo_vdiff_solver__matrix_idx), UBOUND( &
+      &  mo_vdiff_solver__matrix_idx))
+    END IF
+    CALL ftg_write("mo_vdiff_solver__nmatrix", mo_vdiff_solver__nmatrix)
+    CALL ftg_write("mo_vdiff_solver__nvar_vdiff", mo_vdiff_solver__nvar_vdiff)
+    
+    
+    CALL ftg_write("ftg_vdiff_up_round", ftg_vdiff_up_round)
+    
+    CALL ftg_destroy_savepoint()
+    WRITE (0,*) 'FTG FINALIZE output DATA vdiff_up', get_my_mpi_all_id()
+    CALL ftg_destroy_serializer()
+    
+    CALL work_mpi_barrier()
+    !      CALL finish('FTG EXIT', 'Output captured: vdiff_up', 0)
+    
+    CALL end_loc_timing(19)
+  END IF
+  
+END SUBROUTINE ftg_vdiff_up_capture_output
+
+! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+
+
   !-------------
 
 END MODULE mo_vdiff_upward_sweep
