--- eniac_a/src/atm_dyn_iconam/mo_velocity_advection.f90	2018-10-31 11:51:03.623553721 +0100
+++ eniac_b/src/atm_dyn_iconam/mo_velocity_advection.f90	2018-10-31 11:50:53.083836000 +0100
@@ -67,6 +67,27 @@
   LOGICAL, PARAMETER ::  acc_validate = .FALSE.     !  THIS SHOULD BE .FALSE. AFTER VALIDATION PHASE!
 #endif
 
+
+  ! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+  
+  LOGICAL :: ftg_velocity_tendencies_capture_input_enabled = .TRUE.
+  LOGICAL :: ftg_velocity_tendencies_capture_output_enabled = .TRUE.
+  INTEGER :: ftg_velocity_tendencies_capture_round = 1
+  INTEGER :: ftg_velocity_tendencies_round = 0
+  CHARACTER(len=1024) :: ftg_velocity_tendencies_input_dir = &
+  '++FTGDATADIR++/data/input'
+  CHARACTER(len=1024) :: ftg_velocity_tendencies_output_dir = &
+  '++FTGDATADIR++/data/output'
+  
+  PUBLIC :: ftg_velocity_tendencies_capture_input_enabled, ftg_velocity_tendencies_capture_output_enabled, &
+  &  ftg_velocity_tendencies_capture_round, ftg_velocity_tendencies_input_dir, ftg_velocity_tendencies_output_dir
+  
+  
+  
+  
+  ! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+  
+
   CONTAINS
 
 
@@ -158,6 +179,16 @@
 !DIR$ ATTRIBUTES ALIGN :64 :: z_v_grad_w,z_w_v,zeta,z_ekinh
 !DIR$ ATTRIBUTES ALIGN :64 :: levmask,cfl_clipping
 #endif
+
+  ! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+  
+  ftg_velocity_tendencies_round = ftg_velocity_tendencies_round + 1
+  CALL ftg_velocity_tendencies_capture_input(p_prog, p_patch, p_int, p_metrics, p_diag, z_w_concorr_me, z_kin_hor_e, z_vt_ie, &
+  &  ntnd, istep, lvn_only, dtime)
+  
+  ! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+  
+
     !--------------------------------------------------------------------------
 
     IF (timers_level > 5) CALL timer_start(timer_solve_nh_veltend)
@@ -760,8 +791,865 @@
 
     IF (timers_level > 5) CALL timer_stop(timer_solve_nh_veltend)
 
+
+  ! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+  
+  CALL ftg_velocity_tendencies_capture_output(p_prog, p_metrics, p_diag, z_w_concorr_me, z_kin_hor_e, z_vt_ie)
+  
+  ! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+  
+
   END SUBROUTINE velocity_tendencies
 
+! ================= BEGIN FORTRAN TEST GENERATOR (FTG) =======================
+
+SUBROUTINE ftg_velocity_tendencies_init_for_capture(stage, dir)
+  
+  USE mo_impl_constants, ONLY: MAX_CHAR_LENGTH
+  USE mo_mpi,            ONLY: get_my_mpi_all_id
+  USE m_ser_ftg,         ONLY: ftg_set_serializer, ftg_add_serializer_metainfo, ignore_bullshit_max_dim_size, &
+  &  ignore_bullshit_allow_negative_indices
+  
+  CHARACTER(*), INTENT(IN) :: stage, dir
+  
+  CHARACTER(len=MAX_CHAR_LENGTH) :: basename, mkdirerr
+  
+  WRITE (basename,'(a,a,a,i0)') 'ftg_velocity_tendencies_', TRIM(stage), '_', get_my_mpi_all_id()
+  
+  WRITE (0,*) 'FTG INIT velocity_tendencies '//TRIM(basename), get_my_mpi_all_id()
+  
+  mkdirerr = ''
+  !  CALL EXECUTE_COMMAND_LINE('mkdir -p '//TRIM(dir), cmdmsg=mkdirerr)
+  !  IF (TRIM(mkdirerr) /= '') THEN
+    !    WRITE (0,*) 'FTG INIT *** ERROR: ', TRIM(mkdirerr)
+    !  END IF
+    
+    ignore_bullshit_max_dim_size = 100000
+    ignore_bullshit_allow_negative_indices = .TRUE.
+    
+    CALL ftg_set_serializer(TRIM(dir), TRIM(basename), 'w')
+    CALL ftg_add_serializer_metainfo('subroutine', 'velocity_tendencies')
+    CALL ftg_add_serializer_metainfo('stage', stage)
+    CALL ftg_add_serializer_metainfo('mpi_all_id', get_my_mpi_all_id())
+    
+  END SUBROUTINE ftg_velocity_tendencies_init_for_capture
+  
+  LOGICAL FUNCTION ftg_velocity_tendencies_capture_input_active()
+  
+  ftg_velocity_tendencies_capture_input_active =       &
+  ftg_velocity_tendencies_capture_input_enabled .AND.  &
+  ftg_velocity_tendencies_round .EQ. ftg_velocity_tendencies_capture_round
+  
+END FUNCTION ftg_velocity_tendencies_capture_input_active
+
+SUBROUTINE ftg_velocity_tendencies_capture_input(p_prog, p_patch, p_int, p_metrics, p_diag, z_w_concorr_me, z_kin_hor_e, z_vt_ie, &
+&  ntnd, istep, lvn_only, dtime)
+  
+  USE mtime,     ONLY: calendarType
+  USE mo_mpi,    ONLY: get_my_mpi_all_id
+  USE m_ser_ftg, ONLY: ftg_set_savepoint, ftg_write, ftg_register_only, ftg_destroy_savepoint, ftg_destroy_serializer
+  USE timing_tools, ONLY: start_loc_timing, end_loc_timing
+  
+  USE mo_run_config, ONLY: mo_run_config__timers_level => timers_level, mo_run_config__ltimer => ltimer, mo_run_config__lvert_nest &
+  &  => lvert_nest
+  USE mo_init_vgrid, ONLY: mo_init_vgrid__nflatlev => nflatlev
+  USE mo_nonhydrostatic_config, ONLY: mo_nonhydrostatic_config__lextra_diffu => lextra_diffu
+  USE mo_timer, ONLY: mo_timer__timer_solve_nh_veltend => timer_solve_nh_veltend, mo_timer__timer_intp => timer_intp
+  USE mo_vertical_grid, ONLY: mo_vertical_grid__nrdmax => nrdmax
+  USE mo_parallel_config, ONLY: mo_parallel_config__nproma => nproma
+  
+  TYPE(t_nh_prog), INTENT(in) :: p_prog
+  TYPE(t_patch), INTENT(in) :: p_patch
+  TYPE(t_int_state), INTENT(in) :: p_int
+  TYPE(t_nh_metrics), INTENT(in) :: p_metrics
+  TYPE(t_nh_diag), INTENT(in) :: p_diag
+  REAL(vp), DIMENSION(:,:,:), INTENT(in) :: z_w_concorr_me
+  REAL(vp), DIMENSION(:,:,:), INTENT(in) :: z_kin_hor_e
+  REAL(vp), DIMENSION(:,:,:), INTENT(in) :: z_vt_ie
+  INTEGER, INTENT(in) :: ntnd
+  INTEGER, INTENT(in) :: istep
+  LOGICAL, INTENT(in) :: lvn_only
+  REAL(wp), INTENT(in) :: dtime
+  
+  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
+  CHARACTER(len=256) :: ftg_c
+  
+  IF (ftg_velocity_tendencies_capture_input_active()) THEN
+    CALL start_loc_timing("velocity_tendencies: FTG capture input", 10)
+    
+    CALL ftg_velocity_tendencies_init_for_capture('input', ftg_velocity_tendencies_input_dir)
+    CALL ftg_set_savepoint('input')
+    
+    WRITE (0,*) 'FTG ROUND velocity_tendencies ', ftg_velocity_tendencies_round, get_my_mpi_all_id()
+    WRITE (0,*) 'FTG WRITE INPUT DATA velocity_tendencies', get_my_mpi_all_id()
+    
+    ! MTIME CALENDAR TYPE --> Remove this line if mtime is not used
+    CALL ftg_write("ftg_mtime_calendar", calendarType())
+    
+    ! BASIC ARGUMENTS
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_z_w_concorr_me)
+    !$ACC UPDATE HOST( z_w_concorr_me )
+#endif
+    
+    CALL ftg_write("z_w_concorr_me", z_w_concorr_me, LBOUND(z_w_concorr_me), UBOUND(z_w_concorr_me))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_z_kin_hor_e)
+    !$ACC UPDATE HOST( z_kin_hor_e )
+#endif
+    
+    CALL ftg_write("z_kin_hor_e", z_kin_hor_e, LBOUND(z_kin_hor_e), UBOUND(z_kin_hor_e))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_z_vt_ie)
+    !$ACC UPDATE HOST( z_vt_ie )
+#endif
+    
+    CALL ftg_write("z_vt_ie", z_vt_ie, LBOUND(z_vt_ie), UBOUND(z_vt_ie))
+    CALL ftg_write("ntnd", ntnd)
+    CALL ftg_write("istep", istep)
+    CALL ftg_write("lvn_only", lvn_only)
+    CALL ftg_write("dtime", dtime)
+    
+    
+    ! OPTIONAL ARGUMENTS
+    
+    ! TYPE MEMBERS
+    CALL ftg_register_only("p_prog", "TYPE(t_nh_prog)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_prog_vn)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_prog%vn )
+#endif
+    
+    
+    CALL ftg_write("p_prog%vn", p_prog%vn, LBOUND(p_prog%vn), UBOUND(p_prog%vn))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_prog_w)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_prog%w )
+#endif
+    
+    
+    CALL ftg_write("p_prog%w", p_prog%w, LBOUND(p_prog%w), UBOUND(p_prog%w))
+    CALL ftg_register_only("p_patch", "TYPE(t_patch)")
+    CALL ftg_write("p_patch%id", p_patch%id)
+    CALL ftg_write("p_patch%n_childdom", p_patch%n_childdom)
+    CALL ftg_write("p_patch%nblks_c", p_patch%nblks_c)
+    CALL ftg_write("p_patch%nblks_e", p_patch%nblks_e)
+    CALL ftg_write("p_patch%nblks_v", p_patch%nblks_v)
+    CALL ftg_write("p_patch%nlev", p_patch%nlev)
+    CALL ftg_write("p_patch%nlevp1", p_patch%nlevp1)
+    CALL ftg_write("p_patch%nshift", p_patch%nshift)
+    CALL ftg_register_only("p_patch%cells", "TYPE(t_grid_cells)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_cells_area)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%cells%area )
+#endif
+    
+    
+    CALL ftg_write("p_patch%cells%area", p_patch%cells%area, LBOUND(p_patch%cells%area), UBOUND(p_patch%cells%area))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_cells_edge_blk)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%cells%edge_blk )
+#endif
+    
+    
+    CALL ftg_write("p_patch%cells%edge_blk", p_patch%cells%edge_blk, LBOUND(p_patch%cells%edge_blk), UBOUND(p_patch%cells%edge_blk))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_cells_edge_idx)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%cells%edge_idx )
+#endif
+    
+    
+    CALL ftg_write("p_patch%cells%edge_idx", p_patch%cells%edge_idx, LBOUND(p_patch%cells%edge_idx), UBOUND(p_patch%cells%edge_idx))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_cells_end_block)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%cells%end_block )
+#endif
+    
+    
+    CALL ftg_write("p_patch%cells%end_block", p_patch%cells%end_block, LBOUND(p_patch%cells%end_block), UBOUND(p_patch%cells% &
+    &  end_block))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_cells_end_index)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%cells%end_index )
+#endif
+    
+    
+    CALL ftg_write("p_patch%cells%end_index", p_patch%cells%end_index, LBOUND(p_patch%cells%end_index), UBOUND(p_patch%cells% &
+    &  end_index))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_cells_neighbor_blk)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%cells%neighbor_blk )
+#endif
+    
+    
+    CALL ftg_write("p_patch%cells%neighbor_blk", p_patch%cells%neighbor_blk, LBOUND(p_patch%cells%neighbor_blk), UBOUND(p_patch% &
+    &  cells%neighbor_blk))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_cells_neighbor_idx)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%cells%neighbor_idx )
+#endif
+    
+    
+    CALL ftg_write("p_patch%cells%neighbor_idx", p_patch%cells%neighbor_idx, LBOUND(p_patch%cells%neighbor_idx), UBOUND(p_patch% &
+    &  cells%neighbor_idx))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_cells_start_block)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%cells%start_block )
+#endif
+    
+    
+    CALL ftg_write("p_patch%cells%start_block", p_patch%cells%start_block, LBOUND(p_patch%cells%start_block), UBOUND(p_patch% &
+    &  cells%start_block))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_cells_start_index)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%cells%start_index )
+#endif
+    
+    
+    CALL ftg_write("p_patch%cells%start_index", p_patch%cells%start_index, LBOUND(p_patch%cells%start_index), UBOUND(p_patch% &
+    &  cells%start_index))
+    CALL ftg_register_only("p_patch%edges", "TYPE(t_grid_edges)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_area_edge)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%area_edge )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%area_edge", p_patch%edges%area_edge, LBOUND(p_patch%edges%area_edge), UBOUND(p_patch%edges% &
+    &  area_edge))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_cell_blk)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%cell_blk )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%cell_blk", p_patch%edges%cell_blk, LBOUND(p_patch%edges%cell_blk), UBOUND(p_patch%edges%cell_blk))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_cell_idx)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%cell_idx )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%cell_idx", p_patch%edges%cell_idx, LBOUND(p_patch%edges%cell_idx), UBOUND(p_patch%edges%cell_idx))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_end_block)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%end_block )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%end_block", p_patch%edges%end_block, LBOUND(p_patch%edges%end_block), UBOUND(p_patch%edges% &
+    &  end_block))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_end_index)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%end_index )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%end_index", p_patch%edges%end_index, LBOUND(p_patch%edges%end_index), UBOUND(p_patch%edges% &
+    &  end_index))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_f_e)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%f_e )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%f_e", p_patch%edges%f_e, LBOUND(p_patch%edges%f_e), UBOUND(p_patch%edges%f_e))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_inv_dual_edge_length)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%inv_dual_edge_length )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%inv_dual_edge_length", p_patch%edges%inv_dual_edge_length, LBOUND(p_patch%edges% &
+    &  inv_dual_edge_length), UBOUND(p_patch%edges%inv_dual_edge_length))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_inv_primal_edge_length)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%inv_primal_edge_length )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%inv_primal_edge_length", p_patch%edges%inv_primal_edge_length, LBOUND(p_patch%edges% &
+    &  inv_primal_edge_length), UBOUND(p_patch%edges%inv_primal_edge_length))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_quad_blk)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%quad_blk )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%quad_blk", p_patch%edges%quad_blk, LBOUND(p_patch%edges%quad_blk), UBOUND(p_patch%edges%quad_blk))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_quad_idx)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%quad_idx )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%quad_idx", p_patch%edges%quad_idx, LBOUND(p_patch%edges%quad_idx), UBOUND(p_patch%edges%quad_idx))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_start_block)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%start_block )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%start_block", p_patch%edges%start_block, LBOUND(p_patch%edges%start_block), UBOUND(p_patch% &
+    &  edges%start_block))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_start_index)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%start_index )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%start_index", p_patch%edges%start_index, LBOUND(p_patch%edges%start_index), UBOUND(p_patch% &
+    &  edges%start_index))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_tangent_orientation)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%tangent_orientation )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%tangent_orientation", p_patch%edges%tangent_orientation, LBOUND(p_patch%edges% &
+    &  tangent_orientation), UBOUND(p_patch%edges%tangent_orientation))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_vertex_blk)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%vertex_blk )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%vertex_blk", p_patch%edges%vertex_blk, LBOUND(p_patch%edges%vertex_blk), UBOUND(p_patch%edges% &
+    &  vertex_blk))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_edges_vertex_idx)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%edges%vertex_idx )
+#endif
+    
+    
+    CALL ftg_write("p_patch%edges%vertex_idx", p_patch%edges%vertex_idx, LBOUND(p_patch%edges%vertex_idx), UBOUND(p_patch%edges% &
+    &  vertex_idx))
+    CALL ftg_register_only("p_patch%verts", "TYPE(t_grid_vertices)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_verts_cell_blk)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%verts%cell_blk )
+#endif
+    
+    
+    CALL ftg_write("p_patch%verts%cell_blk", p_patch%verts%cell_blk, LBOUND(p_patch%verts%cell_blk), UBOUND(p_patch%verts%cell_blk))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_verts_cell_idx)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%verts%cell_idx )
+#endif
+    
+    
+    CALL ftg_write("p_patch%verts%cell_idx", p_patch%verts%cell_idx, LBOUND(p_patch%verts%cell_idx), UBOUND(p_patch%verts%cell_idx))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_verts_edge_blk)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%verts%edge_blk )
+#endif
+    
+    
+    CALL ftg_write("p_patch%verts%edge_blk", p_patch%verts%edge_blk, LBOUND(p_patch%verts%edge_blk), UBOUND(p_patch%verts%edge_blk))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_verts_edge_idx)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%verts%edge_idx )
+#endif
+    
+    
+    CALL ftg_write("p_patch%verts%edge_idx", p_patch%verts%edge_idx, LBOUND(p_patch%verts%edge_idx), UBOUND(p_patch%verts%edge_idx))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_verts_end_blk)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%verts%end_blk )
+#endif
+    
+    
+    CALL ftg_write("p_patch%verts%end_blk", p_patch%verts%end_blk, LBOUND(p_patch%verts%end_blk), UBOUND(p_patch%verts%end_blk))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_verts_end_block)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%verts%end_block )
+#endif
+    
+    
+    CALL ftg_write("p_patch%verts%end_block", p_patch%verts%end_block, LBOUND(p_patch%verts%end_block), UBOUND(p_patch%verts% &
+    &  end_block))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_verts_end_index)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%verts%end_index )
+#endif
+    
+    
+    CALL ftg_write("p_patch%verts%end_index", p_patch%verts%end_index, LBOUND(p_patch%verts%end_index), UBOUND(p_patch%verts% &
+    &  end_index))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_verts_start_blk)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%verts%start_blk )
+#endif
+    
+    
+    CALL ftg_write("p_patch%verts%start_blk", p_patch%verts%start_blk, LBOUND(p_patch%verts%start_blk), UBOUND(p_patch%verts% &
+    &  start_blk))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_verts_start_block)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%verts%start_block )
+#endif
+    
+    
+    CALL ftg_write("p_patch%verts%start_block", p_patch%verts%start_block, LBOUND(p_patch%verts%start_block), UBOUND(p_patch% &
+    &  verts%start_block))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_verts_start_index)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%verts%start_index )
+#endif
+    
+    
+    CALL ftg_write("p_patch%verts%start_index", p_patch%verts%start_index, LBOUND(p_patch%verts%start_index), UBOUND(p_patch% &
+    &  verts%start_index))
+    CALL ftg_register_only("p_patch%cells%decomp_info", "TYPE(t_grid_domain_decomp_info)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_patch_cells_decomp_info_owner_mask)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_patch%cells%decomp_info%owner_mask )
+#endif
+    
+    
+    CALL ftg_write("p_patch%cells%decomp_info%owner_mask", p_patch%cells%decomp_info%owner_mask, LBOUND(p_patch%cells%decomp_info% &
+    &  owner_mask), UBOUND(p_patch%cells%decomp_info%owner_mask))
+    CALL ftg_register_only("p_int", "TYPE(t_int_state)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_int_c_lin_e)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_int%c_lin_e )
+#endif
+    
+    
+    CALL ftg_write("p_int%c_lin_e", p_int%c_lin_e, LBOUND(p_int%c_lin_e), UBOUND(p_int%c_lin_e))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_int_cells_aw_verts)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_int%cells_aw_verts )
+#endif
+    
+    
+    CALL ftg_write("p_int%cells_aw_verts", p_int%cells_aw_verts, LBOUND(p_int%cells_aw_verts), UBOUND(p_int%cells_aw_verts))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_int_e_bln_c_s)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_int%e_bln_c_s )
+#endif
+    
+    
+    CALL ftg_write("p_int%e_bln_c_s", p_int%e_bln_c_s, LBOUND(p_int%e_bln_c_s), UBOUND(p_int%e_bln_c_s))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_int_geofac_grdiv)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_int%geofac_grdiv )
+#endif
+    
+    
+    CALL ftg_write("p_int%geofac_grdiv", p_int%geofac_grdiv, LBOUND(p_int%geofac_grdiv), UBOUND(p_int%geofac_grdiv))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_int_geofac_n2s)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_int%geofac_n2s )
+#endif
+    
+    
+    CALL ftg_write("p_int%geofac_n2s", p_int%geofac_n2s, LBOUND(p_int%geofac_n2s), UBOUND(p_int%geofac_n2s))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_int_geofac_rot)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_int%geofac_rot )
+#endif
+    
+    
+    CALL ftg_write("p_int%geofac_rot", p_int%geofac_rot, LBOUND(p_int%geofac_rot), UBOUND(p_int%geofac_rot))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_int_rbf_vec_coeff_e)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_int%rbf_vec_coeff_e )
+#endif
+    
+    
+    CALL ftg_write("p_int%rbf_vec_coeff_e", p_int%rbf_vec_coeff_e, LBOUND(p_int%rbf_vec_coeff_e), UBOUND(p_int%rbf_vec_coeff_e))
+    CALL ftg_register_only("p_metrics", "TYPE(t_nh_metrics)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_coeff1_dwdz)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%coeff1_dwdz )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%coeff1_dwdz", p_metrics%coeff1_dwdz, LBOUND(p_metrics%coeff1_dwdz), UBOUND(p_metrics%coeff1_dwdz))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_coeff2_dwdz)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%coeff2_dwdz )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%coeff2_dwdz", p_metrics%coeff2_dwdz, LBOUND(p_metrics%coeff2_dwdz), UBOUND(p_metrics%coeff2_dwdz))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_coeff_gradekin)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%coeff_gradekin )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%coeff_gradekin", p_metrics%coeff_gradekin, LBOUND(p_metrics%coeff_gradekin), UBOUND(p_metrics% &
+    &  coeff_gradekin))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_ddqz_z_full_e)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%ddqz_z_full_e )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%ddqz_z_full_e", p_metrics%ddqz_z_full_e, LBOUND(p_metrics%ddqz_z_full_e), UBOUND(p_metrics% &
+    &  ddqz_z_full_e))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_ddqz_z_half)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%ddqz_z_half )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%ddqz_z_half", p_metrics%ddqz_z_half, LBOUND(p_metrics%ddqz_z_half), UBOUND(p_metrics%ddqz_z_half))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_ddxn_z_full)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%ddxn_z_full )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%ddxn_z_full", p_metrics%ddxn_z_full, LBOUND(p_metrics%ddxn_z_full), UBOUND(p_metrics%ddxn_z_full))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_ddxt_z_full)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%ddxt_z_full )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%ddxt_z_full", p_metrics%ddxt_z_full, LBOUND(p_metrics%ddxt_z_full), UBOUND(p_metrics%ddxt_z_full))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_wgtfac_c)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%wgtfac_c )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%wgtfac_c", p_metrics%wgtfac_c, LBOUND(p_metrics%wgtfac_c), UBOUND(p_metrics%wgtfac_c))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_wgtfac_e)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%wgtfac_e )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%wgtfac_e", p_metrics%wgtfac_e, LBOUND(p_metrics%wgtfac_e), UBOUND(p_metrics%wgtfac_e))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_wgtfacq_e)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%wgtfacq_e )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%wgtfacq_e", p_metrics%wgtfacq_e, LBOUND(p_metrics%wgtfacq_e), UBOUND(p_metrics%wgtfacq_e))
+    CALL ftg_register_only("p_diag", "TYPE(t_nh_diag)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_ddt_vn_adv)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%ddt_vn_adv )
+#endif
+    
+    
+    CALL ftg_write("p_diag%ddt_vn_adv", p_diag%ddt_vn_adv, LBOUND(p_diag%ddt_vn_adv), UBOUND(p_diag%ddt_vn_adv))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_ddt_w_adv)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%ddt_w_adv )
+#endif
+    
+    
+    CALL ftg_write("p_diag%ddt_w_adv", p_diag%ddt_w_adv, LBOUND(p_diag%ddt_w_adv), UBOUND(p_diag%ddt_w_adv))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_dvn_ie_ubc)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%dvn_ie_ubc )
+#endif
+    
+    
+    CALL ftg_write("p_diag%dvn_ie_ubc", p_diag%dvn_ie_ubc, LBOUND(p_diag%dvn_ie_ubc), UBOUND(p_diag%dvn_ie_ubc))
+    CALL ftg_write("p_diag%max_vcfl_dyn", p_diag%max_vcfl_dyn)
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_vn_ie)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%vn_ie )
+#endif
+    
+    
+    CALL ftg_write("p_diag%vn_ie", p_diag%vn_ie, LBOUND(p_diag%vn_ie), UBOUND(p_diag%vn_ie))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_vt)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%vt )
+#endif
+    
+    
+    CALL ftg_write("p_diag%vt", p_diag%vt, LBOUND(p_diag%vt), UBOUND(p_diag%vt))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_w_concorr_c)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%w_concorr_c )
+#endif
+    
+    
+    CALL ftg_write("p_diag%w_concorr_c", p_diag%w_concorr_c, LBOUND(p_diag%w_concorr_c), UBOUND(p_diag%w_concorr_c))
+    
+    
+    ! GLOBALS
+    CALL ftg_write("mo_nonhydrostatic_config__lextra_diffu", mo_nonhydrostatic_config__lextra_diffu)
+    CALL ftg_write("mo_run_config__ltimer", mo_run_config__ltimer)
+    CALL ftg_write("mo_run_config__lvert_nest", mo_run_config__lvert_nest)
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_mo_init_vgrid__nflatlev)
+    !$ACC UPDATE HOST( mo_init_vgrid__nflatlev )
+#endif
+    
+    CALL ftg_write("mo_init_vgrid__nflatlev", mo_init_vgrid__nflatlev, LBOUND(mo_init_vgrid__nflatlev), UBOUND( &
+    &  mo_init_vgrid__nflatlev))
+    CALL ftg_write("mo_parallel_config__nproma", mo_parallel_config__nproma)
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_mo_vertical_grid__nrdmax)
+    !$ACC UPDATE HOST( mo_vertical_grid__nrdmax )
+#endif
+    
+    CALL ftg_write("mo_vertical_grid__nrdmax", mo_vertical_grid__nrdmax, LBOUND(mo_vertical_grid__nrdmax), UBOUND( &
+    &  mo_vertical_grid__nrdmax))
+    CALL ftg_write("mo_timer__timer_intp", mo_timer__timer_intp)
+    CALL ftg_write("mo_timer__timer_solve_nh_veltend", mo_timer__timer_solve_nh_veltend)
+    CALL ftg_write("mo_run_config__timers_level", mo_run_config__timers_level)
+    
+    
+    CALL ftg_write("ftg_velocity_tendencies_round", ftg_velocity_tendencies_round)
+    
+    CALL ftg_destroy_savepoint()
+    WRITE (0,*) 'FTG FINALIZE INPUT DATA velocity_tendencies', get_my_mpi_all_id()
+    CALL ftg_destroy_serializer()
+    
+    CALL end_loc_timing(10)
+  END IF
+  
+  CALL start_loc_timing("velocity_tendencies: computation", 11)
+  
+END SUBROUTINE ftg_velocity_tendencies_capture_input
+
+LOGICAL FUNCTION ftg_velocity_tendencies_capture_output_active()
+
+ftg_velocity_tendencies_capture_output_active =       &
+ftg_velocity_tendencies_capture_output_enabled .AND.  &
+ftg_velocity_tendencies_round .EQ. ftg_velocity_tendencies_capture_round
+
+END FUNCTION ftg_velocity_tendencies_capture_output_active
+
+SUBROUTINE ftg_velocity_tendencies_capture_output(p_prog, p_metrics, p_diag, z_w_concorr_me, z_kin_hor_e, z_vt_ie)
+  
+  USE mo_mpi, ONLY: work_mpi_barrier, get_my_mpi_all_id
+  USE mo_exception, ONLY: finish
+  USE m_ser_ftg, ONLY: ftg_set_savepoint, ftg_write, ftg_register_only, ftg_destroy_savepoint, ftg_destroy_serializer
+  USE timing_tools, ONLY: start_loc_timing, end_loc_timing
+  
+  USE mo_run_config, ONLY: mo_run_config__timers_level => timers_level, mo_run_config__ltimer => ltimer, mo_run_config__lvert_nest &
+  &  => lvert_nest
+  USE mo_init_vgrid, ONLY: mo_init_vgrid__nflatlev => nflatlev
+  USE mo_nonhydrostatic_config, ONLY: mo_nonhydrostatic_config__lextra_diffu => lextra_diffu
+  USE mo_timer, ONLY: mo_timer__timer_solve_nh_veltend => timer_solve_nh_veltend, mo_timer__timer_intp => timer_intp
+  USE mo_vertical_grid, ONLY: mo_vertical_grid__nrdmax => nrdmax
+  USE mo_parallel_config, ONLY: mo_parallel_config__nproma => nproma
+  
+  TYPE(t_nh_prog), INTENT(in) :: p_prog
+  TYPE(t_nh_metrics), INTENT(in) :: p_metrics
+  TYPE(t_nh_diag), INTENT(in) :: p_diag
+  REAL(vp), DIMENSION(:,:,:), INTENT(in) :: z_w_concorr_me
+  REAL(vp), DIMENSION(:,:,:), INTENT(in) :: z_kin_hor_e
+  REAL(vp), DIMENSION(:,:,:), INTENT(in) :: z_vt_ie
+  
+  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
+  CHARACTER(len=256) :: ftg_c
+  
+  CALL end_loc_timing(11)
+  
+  IF (ftg_velocity_tendencies_capture_output_active()) THEN
+    CALL start_loc_timing("velocity_tendencies: FTG capture output", 19)
+    
+    CALL ftg_velocity_tendencies_init_for_capture('output', ftg_velocity_tendencies_output_dir)
+    CALL ftg_set_savepoint('output')
+    
+    WRITE (0,*) 'FTG ROUND velocity_tendencies ', ftg_velocity_tendencies_round, get_my_mpi_all_id()
+    WRITE (0,*) 'FTG WRITE output DATA velocity_tendencies', get_my_mpi_all_id()
+    
+    
+    ! BASIC ARGUMENTS
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_z_w_concorr_me)
+    !$ACC UPDATE HOST( z_w_concorr_me )
+#endif
+    
+    CALL ftg_write("z_w_concorr_me", z_w_concorr_me, LBOUND(z_w_concorr_me), UBOUND(z_w_concorr_me))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_z_kin_hor_e)
+    !$ACC UPDATE HOST( z_kin_hor_e )
+#endif
+    
+    CALL ftg_write("z_kin_hor_e", z_kin_hor_e, LBOUND(z_kin_hor_e), UBOUND(z_kin_hor_e))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_z_vt_ie)
+    !$ACC UPDATE HOST( z_vt_ie )
+#endif
+    
+    CALL ftg_write("z_vt_ie", z_vt_ie, LBOUND(z_vt_ie), UBOUND(z_vt_ie))
+    
+    
+    ! OPTIONAL ARGUMENTS
+    
+    ! TYPE MEMBERS
+    CALL ftg_register_only("p_prog", "TYPE(t_nh_prog)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_prog_vn)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_prog%vn )
+#endif
+    
+    
+    CALL ftg_write("p_prog%vn", p_prog%vn, LBOUND(p_prog%vn), UBOUND(p_prog%vn))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_prog_w)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_prog%w )
+#endif
+    
+    
+    CALL ftg_write("p_prog%w", p_prog%w, LBOUND(p_prog%w), UBOUND(p_prog%w))
+    CALL ftg_register_only("p_metrics", "TYPE(t_nh_metrics)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_coeff1_dwdz)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%coeff1_dwdz )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%coeff1_dwdz", p_metrics%coeff1_dwdz, LBOUND(p_metrics%coeff1_dwdz), UBOUND(p_metrics%coeff1_dwdz))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_coeff2_dwdz)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%coeff2_dwdz )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%coeff2_dwdz", p_metrics%coeff2_dwdz, LBOUND(p_metrics%coeff2_dwdz), UBOUND(p_metrics%coeff2_dwdz))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_coeff_gradekin)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%coeff_gradekin )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%coeff_gradekin", p_metrics%coeff_gradekin, LBOUND(p_metrics%coeff_gradekin), UBOUND(p_metrics% &
+    &  coeff_gradekin))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_ddqz_z_full_e)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%ddqz_z_full_e )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%ddqz_z_full_e", p_metrics%ddqz_z_full_e, LBOUND(p_metrics%ddqz_z_full_e), UBOUND(p_metrics% &
+    &  ddqz_z_full_e))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_ddqz_z_half)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%ddqz_z_half )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%ddqz_z_half", p_metrics%ddqz_z_half, LBOUND(p_metrics%ddqz_z_half), UBOUND(p_metrics%ddqz_z_half))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_ddxn_z_full)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%ddxn_z_full )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%ddxn_z_full", p_metrics%ddxn_z_full, LBOUND(p_metrics%ddxn_z_full), UBOUND(p_metrics%ddxn_z_full))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_ddxt_z_full)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%ddxt_z_full )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%ddxt_z_full", p_metrics%ddxt_z_full, LBOUND(p_metrics%ddxt_z_full), UBOUND(p_metrics%ddxt_z_full))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_wgtfac_c)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%wgtfac_c )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%wgtfac_c", p_metrics%wgtfac_c, LBOUND(p_metrics%wgtfac_c), UBOUND(p_metrics%wgtfac_c))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_wgtfac_e)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%wgtfac_e )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%wgtfac_e", p_metrics%wgtfac_e, LBOUND(p_metrics%wgtfac_e), UBOUND(p_metrics%wgtfac_e))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_metrics_wgtfacq_e)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_metrics%wgtfacq_e )
+#endif
+    
+    
+    CALL ftg_write("p_metrics%wgtfacq_e", p_metrics%wgtfacq_e, LBOUND(p_metrics%wgtfacq_e), UBOUND(p_metrics%wgtfacq_e))
+    CALL ftg_register_only("p_diag", "TYPE(t_nh_diag)")
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_ddt_vn_adv)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%ddt_vn_adv )
+#endif
+    
+    
+    CALL ftg_write("p_diag%ddt_vn_adv", p_diag%ddt_vn_adv, LBOUND(p_diag%ddt_vn_adv), UBOUND(p_diag%ddt_vn_adv))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_ddt_w_adv)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%ddt_w_adv )
+#endif
+    
+    
+    CALL ftg_write("p_diag%ddt_w_adv", p_diag%ddt_w_adv, LBOUND(p_diag%ddt_w_adv), UBOUND(p_diag%ddt_w_adv))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_dvn_ie_ubc)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%dvn_ie_ubc )
+#endif
+    
+    
+    CALL ftg_write("p_diag%dvn_ie_ubc", p_diag%dvn_ie_ubc, LBOUND(p_diag%dvn_ie_ubc), UBOUND(p_diag%dvn_ie_ubc))
+    CALL ftg_write("p_diag%max_vcfl_dyn", p_diag%max_vcfl_dyn)
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_vn_ie)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%vn_ie )
+#endif
+    
+    
+    CALL ftg_write("p_diag%vn_ie", p_diag%vn_ie, LBOUND(p_diag%vn_ie), UBOUND(p_diag%vn_ie))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_vt)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%vt )
+#endif
+    
+    
+    CALL ftg_write("p_diag%vt", p_diag%vt, LBOUND(p_diag%vt), UBOUND(p_diag%vt))
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_p_diag_w_concorr_c)
+    ! THIS IS CURRENTLY DISABLED AS DEALING WITH DERIVED TYPES DOES NOT WORK
+    !NOACC UPDATE HOST( p_diag%w_concorr_c )
+#endif
+    
+    
+    CALL ftg_write("p_diag%w_concorr_c", p_diag%w_concorr_c, LBOUND(p_diag%w_concorr_c), UBOUND(p_diag%w_concorr_c))
+    
+    
+    ! GLOBALS
+    CALL ftg_write("mo_nonhydrostatic_config__lextra_diffu", mo_nonhydrostatic_config__lextra_diffu)
+    CALL ftg_write("mo_run_config__ltimer", mo_run_config__ltimer)
+    CALL ftg_write("mo_run_config__lvert_nest", mo_run_config__lvert_nest)
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_mo_init_vgrid__nflatlev)
+    !$ACC UPDATE HOST( mo_init_vgrid__nflatlev )
+#endif
+    
+    CALL ftg_write("mo_init_vgrid__nflatlev", mo_init_vgrid__nflatlev, LBOUND(mo_init_vgrid__nflatlev), UBOUND( &
+    &  mo_init_vgrid__nflatlev))
+    CALL ftg_write("mo_parallel_config__nproma", mo_parallel_config__nproma)
+#if defined(FTG_ACC_COPYOUT) && !defined(FTG_ACC_NOCOPYOUT_mo_vertical_grid__nrdmax)
+    !$ACC UPDATE HOST( mo_vertical_grid__nrdmax )
+#endif
+    
+    CALL ftg_write("mo_vertical_grid__nrdmax", mo_vertical_grid__nrdmax, LBOUND(mo_vertical_grid__nrdmax), UBOUND( &
+    &  mo_vertical_grid__nrdmax))
+    CALL ftg_write("mo_timer__timer_intp", mo_timer__timer_intp)
+    CALL ftg_write("mo_timer__timer_solve_nh_veltend", mo_timer__timer_solve_nh_veltend)
+    CALL ftg_write("mo_run_config__timers_level", mo_run_config__timers_level)
+    
+    
+    CALL ftg_write("ftg_velocity_tendencies_round", ftg_velocity_tendencies_round)
+    
+    CALL ftg_destroy_savepoint()
+    WRITE (0,*) 'FTG FINALIZE output DATA velocity_tendencies', get_my_mpi_all_id()
+    CALL ftg_destroy_serializer()
+    
+    CALL work_mpi_barrier()
+    !      CALL finish('FTG EXIT', 'Output captured: velocity_tendencies', 0)
+    
+    CALL end_loc_timing(19)
+  END IF
+  
+END SUBROUTINE ftg_velocity_tendencies_capture_output
+
+! ================= END FORTRAN TEST GENERATOR (FTG) =========================
+
+
+
 #ifdef _OPENACC
      SUBROUTINE h2d_velocity_tendencies( p_prog, p_diag, z_w_concorr_me, z_kin_hor_e, z_vt_ie )
        TYPE(t_nh_prog), INTENT(INOUT)            :: p_prog
